%PDF-1.3%‚„œ”
1 0 obj<< /Type /Page /Parent 47 0 R /Resources 2 0 R /Contents 3 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj2 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj3 0 obj<< /Length 7307 >> stream
BT/F2 1 Tf10 0 0 10 282.17 744 Tm0 g/GS1 gs0 Tc0 Tw(-2-)Tj/F4 1 Tf-21.017 -3.6 TD0.25 Tw[(3. Cache)-250(Basics)]TJ/F2 1 Tf0 -1.56 TD-0.0001 Tc0.0586 Tw[(First, a fe)24.9(w)-308.6(w)9.9(ords about caches in general.)-558.6(Cache memory ts into the storage hierarchy)-308.6(i)-0.1(n)-308.6(terms of both)]TJ0 -1.2 TD0 Tc0.062 Tw[(size and speed. Cache line misses, page f)10(aults and HTTP requests are the same thing at dif)25(ferent le)25(v)15(els of)]TJT*-0.0001 Tc0.0092 Tw[(this hierarchy)64.9(.)64.9( )-315(When a Squid proxy doesní)17.9(t)-259.2(h)-0.1(a)19.9(v)19.9( )254.1(e)-259.2(an object in its cache, it forw)9.9(ards the HTTP request to the)]TJT*0 Tc0.0371 Tw[(origin serv)15(er)55(.)-537.1(When a CPU requests an address which isní)18(t)-287.1(i)0(n)-287.1(memory)65(,)-287.1(a)-287.1(page f)10(ault occurs and the page is)]TJT*0.0975 Tw[(read from disk.)-597.5(When a CPU requests an address which isní)18(t)-347.5(i)0(n)-347.5(cache, the containing cache line is read)]TJT*0.0127 Tw[(from memory)65(.)-512.8(L)0(R)40(U)0(,)-262.8(w)10(orking set, associati)25(v)15(e)0(,)-262.8(coherenc)15(y)65(,)65( )-65.1(hashing, prefetching are all techniques and termi-)]TJT*-0.0001 Tc0.0001 Tw[(nology which are used in each le)24.9(v)14.9(e)-0.1(l)-250.1(o)-0.1(f)-250.1(the storage hierarchy)64.9(.)]TJ2.5 -1.56 TD0.1051 Tw[(In each case, one smaller f)9.9(aster le)24.9(v)14.9(e)-0.1(l)-355.1(i)-0.1(n)-355.2(the hierarchy)-355.2(i)-0.1(s)-355.2(back)9.9(ed by another bigger slo)24.9(wer le)24.9(v)14.9(el. )-250.1(If)]TJ-2.5 -1.2 TD0 Tc0.2548 Tw[(performance is limited by e)15(xcessi)25(v)15(e)15( )-15.1(use of the slo)25(wer le)25(v)15(el, then according to Amdahlí)55(s)-504.8(L)0(a)15(w)65(,)-504.8(little)]TJT*0 Tw[(impro)15(v)15(ement can be made by just making the f)10(aster le)25(v)15(e)0(l)-250(f)10(aster)55(.)]TJ2.5 -1.56 TD0.0664 Tw[(W)40(ith respect to cache memory [Handy98], the most important thing to understand is the cache line.)]TJ-2.5 -1.2 TD0.1167 Tw[(T)80(ypically a cache line is 32 bytes long and it is aligned to a 32 byte of)25(fset. )-250(First)-366.7(a)-366.7(block of memory)65(,)-366.7(a)]TJT*0.1087 Tw[(memory line, is loaded into a cache line.)-608.7(This cost is a cache miss, the latenc)15(y)-358.7(o)0(f)-358.7(memory)65(.)-608.7(Then, after)]TJT*0.0607 Tw[(loading, bytes within a cache line can be referenced without penalty as long as it remains in the cache.)-560.7(If)]TJT*0.0183 Tw[(the cache line isní)18(t)-268.3(used it will be dropped e)25(v)15(entually when another memory line needs to be loaded.)-518.4(If the)]TJT*0 Tw(cache line is modied, it will need to be written before it is dropped.)Tj2.5 -1.56 TD0.1371 Tw[(This is the simplest and most important vie)25(w)-387.1(o)0(f)-387.1(a)-387.1(cache memory)65(.)-637.1(Its lesson is tw)10(o-fold: pack as)]TJ-2.5 -1.2 TD0.1656 Tw[(much into a cache line as possible and use as fe)25(w)-415.6(cache lines as possible.)-665.6(Future memory bandwidth)]TJT*0.1292 Tw[(increases \(DDR and Ramb)20(us\) will re)25(w)10(ard this practice.)-629.2(The more comple)15(x)-379.2(characteristics of cache, the)]TJT*0 Tw[(structure and beha)20(vior)40(,)-250(are important for understanding and a)20(v)20(oiding w)10(orst case cache beha)20(vior: thrashing.)]TJ2.5 -1.56 TD0.0171 Tw(Competing for and sharing of cache lines is a good thing, up to a point, when it becomes a bad thing.)Tj-2.5 -1.2 TD0.069 Tw[(Ideally a f)10(ast cache will ha)20(v)15(e)15( )-15.1(a)15( )-15.1(high cache hit rate and the performance will not be bound to the speed of)]TJT*0.1039 Tw[(the memory)65(.)-603.9(But a really bad thing, thrashing, happens when there is too much competition for too fe)25(w)]TJT*0.087 Tw[(cache lines.)-587.1(This happens in w)10(orst case scenarios for data structures.)-587(Unfortunately the current proling)]TJT*0.0505 Tw[(tools look at the instructions rather than data.)-550.5(This means that a programmer must be a)15(w)10(are of w)10(orst case)]TJT*0 Tw[(scenarios for data structures and a)20(v)20(oid them.)-500(A)-250(useful tool for nding a hot spot is cacheprof [Se)25(w)10(ard].)]TJ/F4 1 Tf0 -2.4 TD[(4. )-250(The)-250(P)20(entium II L1 and L2 Caches)]TJ/F2 1 Tf0 -1.56 TD0.0381 Tw[(The Pentium II [Shanle)15(y97] 32K L1 cache consists of 1024 32 byte cache lines partitioned into instruction)]TJ0 -1.2 TD0.0157 Tw[(and data banks of 512 lines each.)-515.7(It uses the color bits 5-11 to inde)15(x)-265.8(into an array of sets of cache lines.)-515.8(In)]TJT*(parallel, it compares the tag bits 12-31 \(12-35 with Pentium III Physical Address Extension\) for each of the)TjT*0.0882 Tw[(cache lines in the inde)15(x)15(e)0(d)-338.2(set. )-250(L1)-338.2(uses a 4-w)10(ay set associati)25(v)15(e)15( )-15(mapping which di)25(vides the 512 lines into)]TJT*0 Tw(128 sets of 4 cache lines.)Tj2.5 -1.56 TD0.0657 Tw[(Each of these sets is really a least recently used \(LR)40(U\) list.)-565.7(If there is a match, the matching cache)]TJ-2.5 -1.2 TD0.0638 Tw[(line is used and it is mo)15(v)15(e)0(d)-313.8(t)0(o)-313.8(the front of the list.)-563.8(If there isní)18(t)-313.8(a)-313.8(match, the data is fetched from L2, the)]TJT*0 Tw[(cache line at the end of the list is replaced and the ne)25(w)-250(entry is put at the front of the list.)]TJ2.5 -1.56 TD0.0447 Tw[(T)80(w)80( )224.7(o)-294.8(memory lines of the same color compete for the same set of 4 L1 cache lines.)-544.7(The)15(y)-294.7(are of)25(f)-294.7(the)]TJ-2.5 -1.2 TD0.0154 Tw[(same color if their color bits \(5-11\) are the same.)-515.4(Alternati)25(v)15(ely the)15(y)-265.4(are of the same color if their addresses)]TJT*0.0326 Tw[(dif)25(fer by a multiple of 4096: 2 à \(7 color bits + 5 of)25(fset bits\).)-532.7(F)15(o)0(r)-282.7(e)15(xample, address 64 and 12352 dif)25(fer by)]TJT*0.0175 Tw[(12288 which is 3*4096.)-517.5(So, 64 and 12352 compete for a total of 4 L1 cache lines. But 64 and 12384 dif)25(fer)]TJT*0 Tw[(by 12320, not a multiple of 4096, so the)15(y)-250(doní)18(t)-250(compete for the same L1 cache lines.)]TJ2.5 -1.56 TD0.0841 Tw[(Instructions are also cached.)-584.2(The Pentium II L1 cache is a Harv)25(ard, or split instruction/data cache.)]TJ-2.5 -1.2 TD0.0986 Tw[(This means that instructions and data ne)25(v)15(e)0(r)-348.7(compete for the same L1 cache lines.)-598.7(L2 is a unied cache.)]TJT*0 Tw(Unied means that there is a single cache bank and that instructions and data compete for cache lines.)Tj2.5 -1.56 TD0.0024 Tw[(L2 is similar to L1 e)15(xcept lar)18(ger and much slo)25(wer)55(.)-502.4(The on-package 256K L2 cache on my Pentium II)]TJ-2.5 -1.2 TD0.0124 Tw[(has 8192 cache lines.)-512.4(It is also 4-w)10(ay set associati)25(v)15(e)15( )-15(b)20(ut is unied. There are Pentium IIí)55(s)-262.4(with 512K of L2)]TJT*0.0329 Tw[(which increase the set size to 8.)-533(Also, there are PIIIí)55(s)-283(with up to 2 MB of L2.)-532.9(If there is a cache line miss)]TJT*0.0484 Tw[(for L2, the cache line is fetched from memory)65(.)-548.4(T)80(w)10(o)10( )-10(memory lines compete for the same L2 cache lines if)]TJT*0 Tw[(the)15(y)-250(dif)25(fer by a multiple of 64K: 2 à \(11 cache color bits + 5 of)25(fset bits\).)]TJETendstreamendobj4 0 obj<< /Type /Page /Parent 47 0 R /Resources 5 0 R /Contents 6 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj5 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj6 0 obj<< /Length 3563 >> stream
BT/F2 1 Tf10 0 0 10 282.17 744 Tm0 g/GS1 gs0 Tc0 Tw(-3-)Tj-18.517 -3.6 TD(The important things to remember about my Pentium II are:)Tj1.1 -2.4 TD[()-1500(cache lines are 32 bytes in size and are aligned to 32 byte of)25(fsets)]TJ0 -1.2 TD[()-1500(memory locations which are of)25(fset by multiples of 4K bytes compete for 4 L1 cache lines)]TJT*[()-1500(memory locations which are of)25(fset by multiples of 64K bytes compete for 4 L2 cache lines.)]TJT*[()-1500(L)0(1)-250(has separate cache lines for instructions and data - Harv)25(ard)]TJT*[()-1500(L)0(2)-250(shares cache lines between instructions and data - unied)]TJ/F4 1 Tf-3.6 -3.6 TD0.25 Tw[(5. V)92(ariable )250(Alignment)]TJ/F2 1 Tf0 -1.56 TD0.1392 Tw[(W)80(e)80( )-80.1(will start with the simple stuf)25(f. )-250(It)-389.2(is better to align just about e)25(v)15(erything to a long w)10(ord boundary)65(.)]TJ0 -1.2 TD0.164 Tw(Linux is written in the gcc programming language and a careful study of the gcc standards document,)TjT*0.0166 Tw[("Using and Porting GNU CC" [Stallman00], is therefore necessary: no one embraces and e)15(xtends quite lik)10(e)]TJT*0.1716 Tw[(Richard Stallman.)-671.7(gcc is particularly helpful with structure eld alignment which are intelligently and)]TJT*0 Tw[(automatically aligned.)-500(ANSI C Standard allo)25(ws for packing or padding according to the implementation.)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(struct dirent {)Tj2.4 -1.2 TD6.6 Tw(long d_ino;)TjT*0.6 Tw(__kernel_off_t d_off;)TjT*0 Tw[(unsigned short)-1200(d_reclen;)]TJT*6.6 Tw(char d_name[256];)Tj-2.4 -1.2 TD0 Tw(};)Tj/F4 1 Tf0 -2.4 TD0 Tc[(Figur)18(e)-250(2)0(.)-500(<linux/dir)18(ent.h>)]TJ/F2 1 Tf-1.1 -2.16 TD0.1292 Tw[(gcc automatically aligns d_reclen to a long boundary)65(.)-379.3(This w)10(orks well for unsigned short, b)20(ut for)]TJ-2.5 -1.2 TD0.0075 Tw[(short on the x86 the compiler must insert sign e)15(xtension instructions.)-507.5(If you are using a short to sa)20(v)15(e)15( )-15.1(space,)]TJT*0.0465 Tw[(consider using an unsigned short. F)15(or e)15(xample, in <linux/mm.h> changing the eld vm_a)20(vl_height into an)]TJT*0 Tw[(unsigned short sa)20(v)15(e)0(s)-250(3)0(2)-250(bytes of instructions for a typical b)20(uild. )-250(It)-250(could just as well be an int.)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(struct vm_area_struct {)Tj2.4 -1.2 TD(...)TjT*[(short )-6000(vm_avl_height;)-4200(// unsigned short or int)]TJT*(...)Tj-2.4 -1.2 TD(};)Tj/F4 1 Tf0 -2.4 TD0 Tc[(Figur)18(e)-250(3)0(.)-500(struct vm_ar)18(ea_struct)]TJ/F2 1 Tf-1.1 -2.16 TD0.1027 Tw[(Strings should be aligned as well.)-602.7(F)15(o)0(r)-352.7(e)15(xample, strncmp\(\) can compare tw)10(o)-352.8(long w)10(ords at a time,)]TJ-2.5 -1.2 TD0.0235 Tw[(cheap SIMD, if both source and destination are long w)10(ord aligned.)-523.6(The x86 code generator for e)15(gcs 2.95.2)]TJT*0 Tw[(has a nice little b)20(ug that doesní)18(t)-250(align short strings at all and aligns long strings to the cache line:)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(char* short_string = "a_short_string";)Tj0 -1.2 TD(char* long_string = "a_long_long_long_long_long_long_long_string";)Tj0 -2.4 TD(\\.LC0:)Tj2.4 -1.2 TD[(.string )-1800("a_short_string")-6000(// an unaligned string)]TJT*(...)TjT*(.align 32)Tj-2.4 -1.2 TD[(\\.LC1: )-20400(//)-600(aligned to cache line)]TJ2.4 -1.2 TD1.8 Tw(.string "a_long_long_long_long_long_long_long_string")Tj/F4 1 Tf-2.4 -2.4 TD0 Tc0 Tw[(Figur)18(e)-250(4)0(.)-500(GCC x86 string disassembly)]TJETendstreamendobj7 0 obj<< /Type /Page /Parent 47 0 R /Resources 8 0 R /Contents 9 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj8 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj9 0 obj<< /Length 4007 >> stream
BT/F2 1 Tf10 0 0 10 282.17 744 Tm0 g/GS1 gs0 Tc0 Tw(-4-)Tj-18.517 -3.6 TD0.0492 Tw[(What is necessary here is to align both strings to long w)10(ords with .align 4.)-549.3(This uses less space and)]TJ-2.5 -1.2 TD0 Tw[(has better alignment. On a typical Linux b)20(uild, this sa)20(v)15(e)0(s)-250(about 8K.)]TJ/F4 1 Tf0 -2.4 TD[(6. )-250(Cache)-250(Alignment of Structur)18(es)]TJ/F2 1 Tf0 -1.56 TD0.0883 Tw[(Arrays and lists of structures of)25(fer an opportunity to cache align lar)18(ge amounts of data.)-588.3(If the frequently)]TJ0 -1.2 TD0.0171 Tw[(accessed elds are collected into a single cache line, the)15(y)-267.1(can be loaded with a single memory access.)-517.2(This)]TJT*0.0826 Tw[(can reduce latenc)15(y)-332.7(and cache footprint.)-582.7(Ho)25(we)25(v)15(e)0(r)40(,)40( )-40.1(it)-332.7(can also increase cache footprint if lar)18(ge amounts of)]TJT*0 Tw[(data are being accessed.)-500(In this case, packing ef)25(cienc)15(y)-250(and also cache pollution are more important.)]TJ2.5 -1.56 TD0.0314 Tw[(So for arrays, the base of an array should be cache aligned.)-531.4(The size of a structure must be either an)]TJ-2.5 -1.2 TD0.1182 Tw[(inte)15(ger multiple or an inte)15(ger di)25(visor of the cache line size.)-618.2(If these conditions hold, then by induction,)]TJT*0.1231 Tw[(each element of the array the cache line will be aligned or pack)10(ed. )-250(Link)10(ed structures are analogous for)]TJT*0 Tw[(alignment b)20(ut doní)18(t)-250(h)0(a)20(v)20( )245(e)-250(the size constraint.)]TJ2.5 -1.56 TD[(An array of structures of type mem_map_t is used by the page allocator as a softw)10(are page table:)]TJ/F1 1 Tf1.1 -3 TD0.0001 Tc(/*)Tj0.6 -1.2 TD[(*)-600(Try to keep the most commonly accessed fields in single cache lines)]TJT*[(*)-600(here \(16 bytes or greater\).)-1200(This ordering should be particularly)]TJT*[(*)-600(beneficial on 32-bit processors. ...)]TJT*(*/)Tj-0.6 -1.2 TD[(typedef struct page {)-12000(// from linux-2.4.0-test2)]TJ2.4 -1.2 TD[(struct list_head)-4800(list; )-4200(//)-600(2,4)]TJT*[(struct address_space*)-1800(mapping; )-2400(//)-600(1,2)]TJT*[(unsigned long)-6600(index; )-3600(//)-600(1,2)]TJT*[(struct page*)-7200(next_hash; )-1200(//)-600(1,2)]TJT*9 Tw[(atomic_t count;)-4200(// )9000(1,1+1)]TJT*0 Tw[(unsigned long)-6600(flags; )-3600(//)-600(1,2)]TJT*[(struct list_head)-4800(lru; )-4800(//)-600(2,4)]TJT*3.6 Tw[(wait_queue_head_t wait;)-4800(// )3600(5,10)]TJT*0 Tw[(struct page**)-6600(pprev_hash; )-600(//)-600(1,2)]TJT*[(struct buffer_head*)-3000(buffers; )-2400(//)-600(1,2)]TJT*[(unsigned long)-6600(virtual; )-2400(//)-600(1,2)]TJT*[(struct zone_struct*)-3000(zone; )-4200(//)-600(1,2)]TJ-2.4 -1.2 TD[(})-600(mem_map_t; )-16800(//)-600(18 * 4 ==)-1200(72 x86)]TJ24.6 -1.2 TD(// 36 * 4 == 144 Alpha)Tj/F4 1 Tf-24.6 -2.4 TD0 Tc[(Figur)18(e)-250(5)0(.)-500(mem_map_t fr)18(om <linux/mm.h>)]TJ/F2 1 Tf-1.1 -2.16 TD0.0463 Tw[(On a 32-bit Pentium, the size of mem_map_t is 72 bytes.)-546.3(It w)10(as 40 bytes in 2.2.16.)-546.3(Since the array)]TJ-2.5 -1.2 TD0.0683 Tw[(allocation code uses sizeof\(mem_map_t\) to align the array)65(,)-318.4(the base is aligned incorrectly as well.)-568.4(In an)15(y)]TJT*0 Tw[(case MAP_ALIGN\(\) can be replaced with L1_CA)40(CHE_ALIGN\(\) which uses simpler code:)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc[(#define MAP_ALIGN\(x\) \(\(\(\(x\) % sizeof\(mem_map_t\)\) == 0\))-6600(\\)]TJ2.4 -1.2 TD[(?)-600(\(x\) : \(\(x\) + sizeof\(mem_map_t\) - \(\(x\) % sizeof\(mem_map_t\)\)\)\))]TJ-2.4 -2.4 TD(lmem_map = \(struct page *\)\(PAGE_OFFSET +)Tj1.8 -1.2 TD(MAP_ALIGN\(\(unsigned long\)lmem_map - PAGE_OFFSET\)\);)Tj-1.8 -2.4 TD[(#define L1_CACHE_ALIGN\(x\) \(\(\(x\)+\(L1_CACHE_BYTES-1\)\))-8400(\\)]TJ2.4 -1.2 TD(&ò\(L1_CACHE_BYTES-1\)\))Tj-2.4 -2.4 TD(lmem_map = \(struct page*\) L1_CACHE_ALIGN\(\(unsigned long\) lmem_map\);)Tj/F4 1 TfT*0 Tc[(Figur)18(e)-250(6)0(.)-500(lmem_map alignment)]TJETendstreamendobj10 0 obj<< /Type /Page /Parent 47 0 R /Resources 11 0 R /Contents 12 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj11 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj12 0 obj<< /Length 5227 >> stream
BT/F2 1 Tf10 0 0 10 282.17 744 Tm0 g/GS1 gs0 Tc0 Tw(-5-)Tj-18.517 -3.6 TD0.0545 Tw(On a 64-bit Alpha, a long is 8 bytes with an 8 byte alignment and sizeof\(mem_map_t\) is 144 bytes.)Tj-2.5 -1.2 TD0.01 Tw[(The ags eld doesní)18(t)-260(need to be a long, it should be an int.)-510(Since atomic_t is also an int and the tw)10(o)-260(elds)]TJT*0.139 Tw[(are adjacent, the)15(y)-389.1(w)10(ould pack into a single long w)10(ord. The page w)10(ait queue head used to be a pointer)55(.)]TJT*0 Tw[(Changing it back w)10(ould sa)20(v)15(e)15( )-15(enough to allo)25(w)-250(cache aligning both 32-bit and 64-bit v)15(ersions.)]TJ/F4 1 Tf0 -2.4 TD[(7. )-250(Cache)-250(Line Alignment f)25(or Differ)18(ent Ar)18(chitectur)18(es)]TJ/F2 1 Tf0 -1.56 TD0.0028 Tw[(It is possible to tar)18(get and conditionally compile for a particular processor)55(.)-502.8(Linux has an include le, <asm-)]TJ0 -1.2 TD0.0604 Tw[(i386/cache.h>, dening the L1 cache line size, L1_CA)40(CHE_BYTES, for the x86 architecture f)10(amily)65(.)-560.4(The)]TJT*0.0652 Tw[(slab allocator [Bonwick94], which allocates small objects from memory pages, uses L1_CA)40(CHE_BYTES)]TJT*0 Tw[(when a client requests a cache aligned object with the SLAB_HWCA)40(CHE_ALIGN ag.)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(/*)Tj0.6 -1.2 TD[(*)-600(include/asm-i386/cache.h)]TJT*(*/)Tj-0.6 -1.2 TD(#ifndef __ARCH_I386_CACHE_H)TjT*(#define __ARCH_I386_CACHE_H)TjT*(/* bytes per L1 cache line */)TjT*1.8 Tw[(#if CPU==586)-600(|| )1800(CPU==686)]TJT*4.2 Tw[(#define L1_CACHE_BYTES)-1200(32)]TJT*0 Tw(#else)TjT*4.2 Tw[(#define L1_CACHE_BYTES)-1200(16)]TJT*0 Tw(#endif)TjT*(#endif)Tj/F4 1 Tf0 -2.4 TD0 Tc[(Figur)18(e)-250(7)0(.)-500(<asm-i386/cache.h>)]TJ/F2 1 Tf-1.1 -2.16 TD0.0482 Tw[(If someone got a Red Hat k)10(ernel conserv)25(ati)25(v)15(ely compiled tar)18(geting the 486, then it assumed 16 byte)]TJ-2.5 -1.2 TD0.0467 Tw[(cache lines.)-546.7(It w)10(as also wrong for the Athlon.)-546.7(This has been x)15(ed in 2.4 by dening and using the k)10(ernel)]TJT*0 Tw[(conguration macro CONFIG_X86_L1_CA)40(CHE_BYTES in <linux/autoconf.h>.)]TJ2.5 -1.56 TD0.1673 Tw(If you must assume one cache line size when laying out the elds inside of structs intended for)Tj-2.5 -1.2 TD0.0709 Tw[(portable softw)10(are, use 32 byte cache lines.)-570.9(F)15(o)0(r)-320.9(e)15(xample, mem_map_t could use this.)-571(Notice that 32 byte)]TJT*0.0731 Tw[(aligned cache lines are also 16 byte aligned.)-573.2(The Po)25(werPC 601 nominally has a 64 byte cache line b)20(ut it)]TJT*0.0049 Tw[(really has tw)10(o)-254.9(connected 32 byte cache lines.)-504.9(The Sparc64 has a 32 byte L1 and a 64 byte L2 cache line.)-505(It)]TJT*0.0739 Tw[(is much easier to think of all systems as ha)20(ving 32 byte cache lines and enumerate the e)15(xceptions, if an)15(y)65(.)]TJT*0.0047 Tw[(Alpha and Sparc64 ha)20(v)15(e)15( )-15(32)-254.7(byte cache lines b)20(ut the Athlon and Itanium, the e)15(xceptions that pro)15(v)15(e)0(s)-254.8(the rule,)]TJT*0 Tw[(ha)20(v)15(e)15( )-15(64)-250(byte cache lines.)-500(And the IBM S/390 G6 has a 256K L1 cache with 128 byte cache lines.)]TJ2.5 -1.56 TD0.1171 Tw[(On the v)25(ast majority of processors, 32 byte cache lines is the right thing to do.)-617.1(And most impor)20(-)]TJ-2.5 -1.2 TD0.1027 Tw[(tantly)65(,)-352.7(i)0(f)-352.7(you ha)20(v)15(e)15( )-15(addressed and a)20(v)20(oided the footprint and w)10(orst case thrashing scenarios in the 32 byte)]TJT*0 Tw[(case, you will ha)20(v)15(e)15( )-15(a)20(v)20(oided them for the other cases.)]TJ/F4 1 Tf0 -2.4 TD[(8. )-250(Caching)-250(and the Linux Scheduler)]TJ/F2 1 Tf0 -1.56 TD0.045 Tw[(Linux represents each process with a task_struct which is allocated tw)10(o)-295(4)0(K)-295(pages. )-250(The)-295(task list is a list of)]TJ0 -1.2 TD0.1028 Tw[(the task_structí)55(s)-352.8(o)0(f)-352.8(all e)15(xisting processes.)-602.8(The runqueue is a list of the task_structí)55(s)-352.9(o)0(f)-352.9(all runnable pro-)]TJT*0.0194 Tw[(cesses. )-250(Each)-269.4(time the scheduler needs to nd another process to run, it searches the entire runqueue for the)]TJT*0 Tw(most deserving process.)Tj2.5 -1.56 TD0.0094 Tw(Some folks at IBM [Bryant00] noticed that if there were a couple of thousand threads that scheduling)Tj-2.5 -1.2 TD0.023 Tw[(took a signicant percentage of the a)20(v)25(ailable CPU time.)-523(On a uniprocessor machine with a couple of thou-)]TJT*0.0377 Tw[(sand nati)25(v)15(e)15( )-15(Ja)20(v)25(a)-287.7(threads, just the scheduler alone w)10(as taking up more than 25% of the a)20(v)25(ailable CPU. This)]TJT*0.0193 Tw[(gets w)10(orse on a shared memory SMP machine because memory b)20(us contention goes up. This doesní)18(t)-269.3(scale.)]TJ2.5 -1.56 TD0.0906 Tw[(It turned out that the goodness\(\) routine in the scheduler referenced se)25(v)15(eral dif)25(ferent cache lines in)]TJ-2.5 -1.2 TD0.066 Tw[(the task_struct. After reor)18(ganizing task_struct, goodness\(\) no)25(w)-316.1(references only a single cache line and the)]TJT*0 Tw[(CPU c)15(ycle count w)10(as reduced from 179 c)15(ycles to 115 c)15(ycles. )-250(This)-250(is still a lot.)]TJETendstreamendobj13 0 obj<< /Type /Page /Parent 71 0 R /Resources 14 0 R /Contents 15 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj14 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj15 0 obj<< /Length 2298 >> stream
BT/F2 1 Tf10 0 0 10 282.17 744 Tm0 g/GS1 gs0 Tc0 Tw(-6-)Tj-18.517 -3.6 TD0.0619 Tw[(Here is the important cache line, the Linux scheduling loop and the goodness\(\) routine.)-562(The sched-)]TJ-2.5 -1.2 TD0.1172 Tw[(uler loop iterates through the entire runqueue, e)25(v)25(aluates each process with goodness\(\) and nds the best)]TJT*0 Tw[(process to run ne)15(xt.)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(struct task_struct {)Tj2.4 -1.2 TD(...)TjT*[(long )-7200(counter;)-6600(// critical 2cd cache line)]TJT*7.2 Tw(long priority;)TjT*0 Tw[(unsigned long)-2400(policy;)]TJT*(struct mm_struct *mm, *active_mm;)TjT*7.8 Tw(int has_cpu;)TjT*(int processor;)TjT*0 Tw[(struct list_head run_list;)-6000(// only first long word)]TJT*(...)Tj-2.4 -1.2 TD(};)Tj0 -2.4 TD(tmp = runqueue_head.next;)Tj0 -1.2 TD(while \(tmp != &runqueue_head\) {)Tj2.4 -1.2 TD[(p)-600(=)-600(list_entry\(tmp, struct task_struct, run_list\);)]TJT*[(if \(can_schedule\(p\)\) {)-8400(// running on another CPU)]TJ2.4 -1.2 TD(int weight = goodness\(p, this_cpu, prev->active_mm\);)TjT*(if \(weight > c\))Tj2.4 -1.2 TD[(c)-600(=)-600(weight, next = p;)]TJ-4.8 -1.2 TD0 Tc(})TjT*0.0001 Tc(tmp = tmp->next;)Tj-2.4 -1.2 TD0 Tc(})Tj0 -2.4 TD0.0001 Tc[(#define PROC_CHANGE_PENALTY)-1800(15 )-4200(//)-600(processor affinity)]TJT*(static inline int goodness\(struct task_struct *p,)Tj2.4 -1.2 TD(int this_cpu, struct mm_struct *this_mm\))Tj-2.4 -1.2 TD0 Tc({)Tj2.4 -1.2 TD0.0001 Tc(int weight;)TjT*(if \(p->policy != SCHED_OTHER\) {)Tj2.4 -1.2 TD(weight = 1000 + p->rt_priority; // realtime processes)TjT*(goto out;)Tj-2.4 -1.2 TD0 Tc(})TjT*0.0001 Tc(weight = p->counter;)TjT*(if \(!weight\))Tj2.4 -1.2 TD[(goto out;)-13800(// no quanta left)]TJ-4.8 -1.2 TD(#ifdef __SMP__)Tj2.4 -1.2 TD(if \(p->processor == this_cpu\))Tj2.4 -1.2 TD[(weight += PROC_CHANGE_PENALTY;)-1200(// processor affinity)]TJ-4.8 -1.2 TD(#endif)Tj2.4 -1.2 TD[(if \(p->mm == this_mm\))-9000(// same thread class)]TJ2.4 -1.2 TD[(weight += 1;)-12000(// as current?)]TJ-2.4 -1.2 TD(weight += p->priority;)Tj-2.4 -1.2 TD(out:)Tj2.4 -1.2 TD(return weight;)Tj-2.4 -1.2 TD0 Tc(})Tj/F4 1 Tf0 -2.4 TD[(Figur)18(e)-250(8)0(.)-500(task_struct and scheduler loop)]TJETendstreamendobj16 0 obj<< /Type /Page /Parent 71 0 R /Resources 17 0 R /Contents 18 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj17 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj18 0 obj<< /Length 5154 >> stream
BT/F2 1 Tf10 0 0 10 282.17 744 Tm0 g/GS1 gs0 Tc0 Tw(-7-)Tj-18.517 -3.6 TD0.0663 Tw[(A)-316.3(long runqueue is certainly not the common case e)25(v)15(en)-316.3(for hea)20(vily loaded serv)15(ers. )-250(This)-316.4(is because)]TJ-2.5 -1.2 TD0.0086 Tw[(e)25(v)25( )248.6(ent dri)25(v)15(e)0(n)-258.7(programs essentially self schedule with poll\(\).)-508.6(The contrasting style, threading, is preferred by)]TJT*0.0386 Tw[(Ja)20(v)25(a)0(,)-288.6(Apache and TUX.)-538.6(It is ironic that poll\(\) also had scalability problems, and on other Unix systems as)]TJT*0 Tw[(well [Hone)15(yman99]. )-250(Also,)-250(the Linux 2.4 x86 k)10(ernels increase the maximum number of threads past 4000.)]TJ2.5 -1.56 TD0.0687 Tw[(On SMP machines, processes ha)20(v)15(e)15( )-15(a)15( )-15(scheduling af)25(nity with the last CPU the)15(y)-318.7(ran on.)-568.7(The idea is)]TJ-2.5 -1.2 TD0.0706 Tw[(that some of the w)10(orking set is still in the local cache.)-570.7(But the scheduler has a subtle SMP b)20(ug. )-250.1(When)-320.7(a)]TJT*0.0791 Tw[(CPU has no processes on the runqueue, the scheduler will assign it a runnable process with an af)25(nity to)]TJT*0.0721 Tw[(another CPU.)-572.1(It w)10(ould be wiser to rst dole out more quanta to processes on the runqueue, perhaps only)]TJT*0 Tw[(those with an af)25(nity to that CPU.)-500(Ev)15(en then it may be better to idle, particularly with a short runqueue.)]TJ/F4 1 Tf0 -2.4 TD0.25 Tw[(9. Cache)-250(Line )250(Pr)18(efetching)]TJ/F2 1 Tf0 -1.56 TD0.163 Tw[(Modern CPUs aggressi)25(v)15(ely prefetch instructions b)20(ut what about data?)-663(CPUs doní)18(t)-413(prefetch data cache)]TJ0 -1.2 TD0.1049 Tw[(lines, b)20(ut v)15(ectorizing compilers do and programs can.)-604.9(Depending on the amount of CPU processing per)]TJT*0.1119 Tw[(cache line, you may need to prefetch more than one cache line ahead. If the prefetch is scheduled suf)25(-)]TJT*0 Tw[(ciently f)10(ar in adv)25(ance, it w)10(oní)18(t)-250(matter if the cache line is in memory rather than L2 [Intel99a].)]TJ2.5 -1.56 TD0.2146 Tw[(T)80(ypically prefetching is used in multimedia k)10(ernels and matrix operations where the prefetched)]TJ-2.5 -1.2 TD0.1159 Tw[(address can be easily calculated.)-615.9(Algorithms operating on data structures can use prefetch as well.)-615.8(The)]TJT*0.0138 Tw[(same methods apply e)15(xcept that the prefetched address will follo)25(w)-263.8(a)-263.8(link rather than an address calculation.)]TJT*0.1395 Tw[(Prefetching for data structures is important since memory bandwidth is increasing f)10(aster than latenc)15(y)-389.5(i)0(s)]TJT*0.0683 Tw[(decreasing. )-249.9(T)35(r)0(a)20(v)15(ersing a data structure is more lik)10(ely to suf)25(fer from a latenc)15(y)-318.3(problem. )-250(Often)-318.3(only a fe)25(w)]TJT*0 Tw[(elds in a structure are used whereas with multimedia usually e)25(v)15(ery bit is e)15(xamined.)]TJ/F4 1 Tf0 -2.4 TD[(9.1. )-250(Pr)18(efetching Fr)18(om Memory)]TJ/F2 1 Tf0 -1.56 TD0.0903 Tw(If a prefetch instruction can be scheduled 20-25 or so instructions before the cache line will be used, the)Tj0 -1.2 TD0.0156 Tw[(fetch can completely o)15(v)15(erlap instruction e)15(x)15(ecution. )-250(The)-265.6(e)15(xact prefetch scheduling distance is a characteris-)]TJT*0 Tw[(tic of the processor and memory)65(.)-500(Superscalar processors e)15(x)15(ecute more than one instruction at a time.)]TJ/F4 1 Tf0 -2.4 TD[(9.2. )-250(Pr)18(efetching Fr)18(om L2)]TJ/F2 1 Tf0 -1.56 TD0.0418 Tw[(If an algorithm is tra)20(v)15(ersing a data structure lik)10(ely to be in L2, and it can schedule a prefetch 6-10 instruc-)]TJ0 -1.2 TD0 Tw[(tions before the cache line will be used, the fetch can completely o)15(v)15(erlap instruction e)15(x)15(ecution.)]TJ2.5 -1.56 TD0.0233 Tw(The Linux scheduler loop is a good candidate for cache line prefetching from L2 because goodness\(\))Tj-2.5 -1.2 TD0 Tw(is short and after the IBM patch, it only touches a single cache line.)Tj2.5 -1.56 TD0.0289 Tw[(Here is a prefetching v)15(ersion of the scheduler)55(.)-279(I)0(t)-278.9(o)15(v)15(erlaps the prefetch of the ne)15(xt cache line from L2)]TJ-2.5 -1.2 TD0 Tw[(during the e)15(x)15(ecution of goodness\(\).)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(tmp = runqueue_head.next;)Tj0 -1.2 TD(while \(tmp != &runqueue_head\) {)Tj2.4 -1.2 TD[(p)-600(=)-600(list_entry\(tmp, struct task_struct, run_list\);)]TJT*(tmp = tmp->next;)TjT*3 Tw[(CacheLine_Prefetch\(tmp->next\); //)-600(movl )3000(xx\(%ebx\),%eax)]TJT*0 Tw(if \(can_schedule\(p\)\) {)Tj2.4 -1.2 TD(int weight = goodness\(p, this_cpu, prev->active_mm\);)TjT*(if \(weight > c\))Tj2.4 -1.2 TD[(c)-600(=)-600(weight, next = p;)]TJ-4.8 -1.2 TD0 Tc(})Tj-2.4 -1.2 TD(})Tj/F4 1 Tf0 -2.4 TD[(Figur)18(e)-250(9)0(.)-500(P)0(r)18(efetching scheduler loop)]TJ/F2 1 Tf-1.1 -2.16 TD0.0044 Tw[(By the w)10(a)0(y)65(,)-254.4(mo)15(ving the tmp pointer chase before the goodness\(\) call ends up using fe)25(wer instructions)]TJ-2.5 -1.2 TD0 Tw[(than the original. And with a little ef)25(fort, the loop could omit tmp as well.)]TJETendstreamendobj19 0 obj<< /Type /Page /Parent 71 0 R /Resources 20 0 R /Contents 21 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj20 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj21 0 obj<< /Length 3878 >> stream
BT/F2 1 Tf10 0 0 10 282.17 744 Tm0 g/GS1 gs0 Tc0 Tw(-8-)Tj/F1 1 Tf-17.417 -3.6 TD0.0001 Tc(inline void CacheLine_Prefetch\(unsigned long addr\))Tj0 -1.2 TD0 Tc({)Tj2.4 -1.2 TD0.0001 Tc(asm volatile\("" : : "r" \(addr\)\);)Tj-2.4 -1.2 TD0 Tc(})Tj/F4 1 Tf0 -2.4 TD0.25 Tw[(Figur)18(e)-250(10. CacheLine_Pr)18(efetch\(\))]TJ/F2 1 Tf-1.1 -2.16 TD0.1355 Tw(This little bit of gcc magic is actually architecture-independent assembly code. It basically means)Tj-2.5 -1.2 TD0.1224 Tw[(load from addr into some temporary re)15(gister of the compilerí)55(s)-372.4(choosing. So technically)65(,)-372.4(I)-372.4(lied. It isní)18(t)-372.5(a)]TJT*0 Tw[(prefetch, ití)55(s)-250(really a preload.)-500(A)-250(prefetch of)25(fers more cache control b)20(ut has some restrictions.)]TJ2.5 -1.56 TD0.0756 Tw[(CacheLine_Prefetch\(\) should be specialized on dif)25(ferent architectures to tak)10(e)-325.6(adv)25(antage of the v)25(ari-)]TJ-2.5 -1.2 TD0.0088 Tw[(ous prefetch instructions. In f)10(act, CacheLine_Prefetch\(\) should be wrapped in conditional compilation logic)]TJT*0.0384 Tw[(because it may be inappropriate on certain Early Bronze Age machines.)-538.4(Also, AMD uses a slightly dif)25(fer)20(-)]TJT*0 Tw[(ent set of prefetch instructions not strictly based on the MMX.)-500(On the Pentium II, this could be:)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(inline void CacheLine_Prefetch\(unsigned long addr\))Tj0 -1.2 TD0 Tc({)Tj2.4 -1.2 TD0.0001 Tc(asm volatile\("prefetcht0 \(%0\)" :: "r" \(addr\)\);)Tj-2.4 -1.2 TD0 Tc(})Tj/F4 1 Tf0 -2.4 TD[(Figur)18(e)-250(11. )-250(P)20(entium II CacheLine_Pr)18(efetch\(\))]TJ-3.6 -3 TD[(10. )-250(Caches)-250(and Iterating Thr)18(ough Lists)]TJ/F2 1 Tf0 -1.56 TD0.0026 Tw[(When repeatedly iterating through an array or a list of structures, be careful of cache considerations.)-502.7(As the)]TJ0 -1.2 TD0.036 Tw[(number of elements increases and approaches the number of cache lines a)20(v)25(ailable, thrashing will gradually)]TJT*-0.0001 Tc0.0001 Tw[(increase. )-250(The)-250.1(gradually increasing thrashing is why)-250.1(this performance problem is hard to nd.)]TJ2.5 -1.56 TD0 Tc0.0867 Tw[(The Linux scheduler iterates through the runqueue to nd the ne)15(xt process to run.)-586.7(Linux also uses)]TJ-2.5 -1.2 TD0.2219 Tw[(for_each_task\(\) to iterate through each task_struct on the task list and perform some w)10(ork. )-250(Iterating)]TJT*0.2281 Tw[(through lists represents potentially lar)18(ge amounts of memory traf)25(c and cache footprint.)-728.2(Here is the)]TJT*0 Tw(for_each_task\(\) iterator macro:)Tj/F1 1 Tf3.6 -3 TD0.0001 Tc[(#define for_each_task\(p\))-24600(\\)]TJ2.4 -1.2 TD(for \(p = &init_task ; \(p = p->next_task\) != &init_task ; \))Tj/F4 1 Tf-2.4 -2.4 TD0 Tc0.25 Tw[(Figur)18(e)-250(12. f)25(or_each_task\(\) )250(iterator)]TJ/F2 1 Tf-1.1 -2.16 TD0.292 Tw[(for_each_task\(\) can be combined with CacheLine_Prefetch\(\).)-792(Notice that for_each_task\(\) uses)]TJ-2.5 -1.2 TD0 Tw[(ne)15(xt_task which isní)18(t)-250(i)0(n)-250(the preferred cache line.)-500(This doubles the memory traf)25(c and cache footprint.)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc[(#define for_each_task\(p\))-24600(\\)]TJ2.4 -1.2 TD[(for \(p = &init_task ; p = p->next_task,)-13200(\\)]TJ2.4 -1.2 TD13.8 Tw(CacheLine_Prefetch\(p->next_task\), \\)TjT*0 Tw[(p)-600(!)0(=)-600(&init_task ; \))]TJ/F4 1 Tf-4.8 -2.4 TD0 Tc[(Figur)18(e)-250(13. )-250(pr)18(efetching f)25(or_each_task\(\) iterator)]TJ/F2 1 Tf-1.1 -2.16 TD0.1411 Tw[(As an e)15(xample, when all of the processes on the runqueue ha)20(v)15(e)15( )-15(used up their scheduling quanta,)]TJ-2.5 -1.2 TD0 Tw(Linux uses for_each_task\(\) to dole out more:)Tj/F1 1 Tf3.6 -3 TD0.0001 Tc(recalculate:)Tj0 -1.2 TD0 Tc({)Tj2.4 -1.2 TD0.0001 Tc(struct task_struct *p;)TjETendstreamendobj22 0 obj<< /Type /Page /Parent 71 0 R /Resources 23 0 R /Contents 24 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj23 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj24 0 obj<< /Length 3557 >> stream
BT/F2 1 Tf10 0 0 10 282.17 744 Tm0 g/GS1 gs0 Tc0 Tw(-9-)Tj/F1 1 Tf-15.017 -3.6 TD0.0001 Tc(spin_unlock_irq\(&runqueue_lock\);)Tj0 -1.2 TD(read_lock\(&tasklist_lock\);)TjT*(for_each_task\(p\))Tj2.4 -1.2 TD(p->counter = \(p->counter >> 1\) + p->priority;)Tj-2.4 -1.2 TD(read_unlock\(&tasklist_lock\);)TjT*(spin_lock_irq\(&runqueue_lock\);)Tj-2.4 -1.2 TD0 Tc(})TjT*0.0001 Tc(goto repeat_schedule;)Tj/F4 1 Tf0 -2.4 TD0 Tc0.25 Tw[(Figur)18(e)-250(14. Scheduler)-250(r)18(ecalculate )250(loop)]TJ/F2 1 Tf-1.1 -2.16 TD0.1192 Tw[(As an observ)25(ation, recalculate should iterate through the runqueue instead of the task queue.)-619.2(It is)]TJ-2.5 -1.2 TD0.0106 Tw[(shorter and there is no reason to dole out more quanta to sleeping processes.)-510.7(counter for sleeping processes)]TJT*0.1518 Tw[(will gro)25(w)-401.9(without bound.)-651.9(When the sleeping process w)10(a)0(k)10(es up, it may ha)20(v)15(e)15( )-15.1(a)15( )-15.1(lar)18(ge amount of quanta)]TJT*0.1213 Tw[(stored up, disturbing the responsi)25(v)15(eness of the other processes.)-621.4(FreeBSD [McK)15(usick96] recomputes the)]TJT*0 Tw[(scheduling priority if an a)15(w)10(ok)10(en)-250(process w)10(as sleeping for more than a second.)]TJ2.5 -1.56 TD(Linux also uses for_each_task\(\) occasionally when allocating a process id in get_pid\(\):)Tj/F1 1 Tf1.1 -3 TD0.0001 Tc(for_each_task\(p\) {)Tj2.4 -1.2 TD(if\(p->pid == last_pid ||)Tj2.4 -1.2 TD(p->pgrp == last_pid ||)TjT*(p->session == last_pid\) {)TjT*(...)Tj-2.4 -1.2 TD0 Tc(})Tj-2.4 -1.2 TD(})Tj/F4 1 Tf0 -2.4 TD0.25 Tw[(Figur)18(e)-250(15. pid)-250(allocation )250(loop)]TJ/F2 1 Tf-1.1 -2.16 TD0.1636 Tw(Examining the uses of for_each_task\(\) it is possible to change the critical task_struct cache line.)Tj-2.5 -1.2 TD0.0905 Tw[(Some elds are mo)15(v)15(e)0(d)-340.5(out, some need to be added and some need to be made smaller)55(.)-590.6(acti)25(v)15(e_mm is an)]TJT*0.032 Tw[(unnecessary eld for purposes of the scheduler loop.)-532(The k)10(ernel type pid_t is currently a 4 byte int.)-532(Ho)25(w-)]TJT*0.0938 Tw[(e)25(v)25( )333.8(er)40(,)40( )-40(the maximum v)25(alue for a process id is PID_MAX which is 0x8000. So pid_t can be changed to an)]TJT*0.0943 Tw[(unsigned short. \(NB, PID_MAX will probably increase in 2.5\).)-594.3(priority is limited to the range 0..40 and)]TJT*0.0342 Tw[(counter is deri)25(v)15(e)0(d)-284.2(from it.)-534.3(polic)15(y)-284.3(i)0(s)-284.3(restricted to six v)25(alues. )-250.1(processor)-284.3(is currently an int and NR_CPUS is)]TJT*0 Tw(32 so changing it to an unsigned short is reasonable.)Tj2.5 -1.56 TD0.3445 Tw[(After these changes, se)25(v)15(eral of the uses of for_each_task\(\) as well as the process id hash,)]TJ-2.5 -1.2 TD0 Tw(nd_task_by_pid, restrict their references to a single cache line.)Tj/F1 1 Tf3.6 -3 TD0.0001 Tc(struct task_struct {)Tj2.4 -1.2 TD(...)TjT*[(unsigned char counter;)-8400(// beginning)]TJT*(unsigned char priority;)TjT*(unsigned char policy_has_cpu;)Tj2.4 -1.2 TD[(/* one char to spare */)-5400(// one)]TJ-2.4 -1.2 TD(unsigned short processor;)TjT*[(unsigned short pid;)-10200(// two)]TJT*(unsigned short pgrp;)TjT*[(unsigned short session;)-7800(// three)]TJT*[(struct mm_struct *mm;)-9000(// four)]TJT*[(struct task_struct *next_task;)-3600(// five)]TJT*[(struct task_struct *pidhash_next;)-1800(// six)]TJT*[(struct task_struct *run_next;)-4200(// seven)]TJ2.4 -1.2 TD[(/* one long word to spare */)-2400(// eight)]TJETendstreamendobj25 0 obj<< /Type /Page /Parent 71 0 R /Resources 26 0 R /Contents 27 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj26 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj27 0 obj<< /Length 5831 >> stream
BT/F2 1 Tf10 0 0 10 279.67 744 Tm0 g/GS1 gs0 Tc0 Tw(-10-)Tj/F1 1 Tf-14.767 -3.6 TD0.0001 Tc(...)Tj-2.4 -1.2 TD(};)Tj/F4 1 Tf0 -2.4 TD0 Tc[(Figur)18(e)-250(16. )-250(P)10(ack)10(ed task_struct f)25(or scheduler)]TJ/F2 1 Tf-1.1 -2.16 TD0.0844 Tw[(If possible, squeeze e)25(v)15(erything the processing loop uses into as fe)25(w)-334.4(cache lines as possible, prefer)20(-)]TJ-2.5 -1.2 TD0.0398 Tw[(ably just one. In your data structures, if you ha)20(v)15(e)15( )-15(to)-289.8(use short instead of int, use short. If it will mak)10(e)-289.7(i)0(t)-289.7(t,)]TJT*0 Tw[(use nibbles and bits. If you caní)18(t)-250(say it in 32 bytes, perhaps you need to rephrase yourself.)]TJ/F4 1 Tf0 -2.4 TD0.25 Tw(11. Thrashing)Tj/F2 1 Tf0 -1.56 TD0.0561 Tw[(OK, you might w)10(ant to close your e)15(yes about no)25(w)-306.2(because ití)55(s)-306.2(going to start getting really gory)65(.)-556.2(N)0(o)25(w)25( )-25.1(we)]TJ0 -1.2 TD0 Tw[(look at the w)10(orst case scenarios of thrashing.)-500(It also gets more comple)15(x.)]TJ2.5 -1.56 TD0.1366 Tw[(The task_struct is allocated as tw)10(o)-386.7(pages which are 4K aligned.)-636.7(The L1 cache di)25(vides the 32-bit)]TJ-2.5 -1.2 TD0.0736 Tw[(address space among the 128 groups each with a set of 4 cache lines. If tw)10(o)-323.6(addresses are separated by a)]TJT*0.0037 Tw[(multiple of 4K bytes, then the)15(y)-253.7(map to the same cache line set. So for the 4-w)10(ay set associati)25(v)15(e)15( )-15(L1)-253.7(cache on)]TJT*0.0076 Tw[(a)-257.6(Pentium II there are 4 cache lines a)20(v)25(ailable for the scheduling related cache line for all of the task_structs.)]TJ2.5 -1.56 TD0.0395 Tw[(Really that isní)18(t)-289.6(s)0(o)-289.6(bad. Asking a task_struct cache line to remain in L1 for a schedule quantum is, I)]TJ-2.5 -1.2 TD0.0579 Tw[(admit, a bit much. But the situation doesní)18(t)-307.9(really impr)]TJ22.4751 0 TD-0.015 Tc0 Tw(ove )Tj1.7219 0 TD0 Tc0.0579 Tw[(for L2. A 256K L2 cache will pro)15(vide only 64)]TJ-24.197 -1.2 TD0.0807 Tw[(suitable cache lines.)-580.8(The w)10(ay this w)10(orks is that a task_struct is 4K page aligned.)-580.7(So in the L2 cache set)]TJT*0.0492 Tw[(inde)15(x, bits 5-11 will be x)15(ed. )-250(So)-299.3(there are 4 bits of possibly unique cache set inde)15(x, or 16 sets of 4 cache)]TJT*0 Tw[(lines or 64 a)20(v)25(ailable cache lines.)]TJ2.5 -1.56 TD0.0616 Tw[(Furthermore, L2 is managed LR)40(U. )-250.1(If)-311.7(you are iterating through a runqueue longer than the ef)25(fecti)25(v)15(e)]TJ-2.5 -1.2 TD0.0825 Tw[(L2 set depth of 64, when you e)15(xceed the set size of L2, the cache thrashes and you may as well ha)20(v)15(e)15( )-15(no)]TJT*0.0662 Tw[(cache. Then, e)25(v)15(ery reschedule the scheduler is scanning the entire runqueue from memory)65(.)-566.2(Prefetching is)]TJT*0.0953 Tw[(rendered useless.)-595.3(Also, the set is not a list of 64 cache lines b)20(ut really 16 associati)25(v)15(e)15( )-15(subsets of 4 cache)]TJT*0 Tw[(lines. )-250(Thrashing)-250(be)15(gins gradually before reaching the set size of 64.)]TJ2.5 -1.56 TD-0.0001 Tc0.1726 Tw[(But it gets w)9.9(orse. I for)17.9(got to tell you about the TLB. Logical addresses are mapped to physical)]TJ-2.5 -1.2 TD0 Tc0 Tw[(addresses via a tw)10(o)-250(l)0(e)25(v)25( )240(el)-250(page table in memory and an on- chip memory management unit.)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(virtual address)Tj2.4 -1.2 TD(page group - bits 22-31)TjT*(page address - bits 12-21)TjT*(page offset - bits 0-11)Tj-2.4 -2.4 TD(physical page lookup)Tj2.4 -1.2 TD(table_level_2 = table_level_1[\(vaddr & mask1\) >> shift1];)TjT*[(page )-5400(=)-600(table_level_2[\(vaddr & mask2\) >> shift2];)]TJ/F4 1 Tf-2.4 -2.4 TD0 Tc[(Figur)18(e)-250(17. )-250(P)20(entium II VM addr)18(ess structur)18(e)-250(and translation)]TJ/F2 1 Tf-1.1 -2.16 TD0.0444 Tw[(These mappings are e)15(xpensi)25(v)15(e)15( )-15(to)-294.4(compute. )-250.1(The)-294.5(masks and shifts are free b)20(ut the loads and adds are)]TJ-2.5 -1.2 TD0.0952 Tw[(serial. )-250.1(The)-345.3(Alpha and Itanium use a 3 le)25(v)15(e)0(l)-345.3(page table structure.)-595.3(Some page tables can be so lar)18(ge the)15(y)]TJT*0.158 Tw[(must be demand paged.)-658(But since the mappings rarely change, the)15(y)-408(are computed on demand and the)]TJT*0.0572 Tw[(results are cached in the TLB.)-557.3(The Pentium II T)35(ranslation Lookaside Buf)25(fer \(TLB\) uses a Harv)25(ard 4-w)10(ay)]TJT*0.064 Tw[(set associati)25(v)15(e)15( )-15(cache with 64 data entries and 32 instruction entries.)-564(The TLB replacement polic)15(y)-314(i)0(s)-314(L)0(R)40(U)]TJT*0.0745 Tw[(within the set.)-574.6(If the TLB doesní)18(t)-324.6(nd a match, a TLB miss tak)10(es place.)-574.6(The cost of a TLB miss ranges)]TJT*0.054 Tw[(from a reported 5 c)15(ycles on a Xeon, to 60 or more c)15(ycles. On the Po)25(werPC it is handled in softw)10(are. )-250(The)]TJT*0 Tw[(Po)25(werPC TLB miss handler is 29 instructions.)]TJ2.5 -1.56 TD0.1518 Tw[(V)60(irtual memory pages are 4K.)-651.9(A)-401.9(g)0(i)25(v)25( )391.8(en)-401.9(task_struct page will compete for 4 TLB slots.)-651.8(Iterating)]TJ-2.5 -1.2 TD0.0169 Tw[(through a long link)10(ed list \(64\) of 4K aligned pages is really the w)10(orst case scenario for the TLB.)-517(The itera-)]TJT*0.0202 Tw[(tion will ush the TLB, slo)25(wly)65(,)-270.3(suf)25(fering TLB misses along the w)10(a)0(y)65(.)-520.3(But for the purposes of the runqueue,)]TJT*0.0271 Tw[(the TLB could just as well ha)20(v)15(e)15( )-15(no)-277.1(entries at all. Linux in)40(v)25(alidates the TLB at each process conte)15(xt switch.)]TJT*0.0037 Tw[(Then, e)25(v)15(ery entry on the runqueue will be a TLB miss re)15(gardless of the size of the runqueue.)-503.7(The only case)]TJETendstreamendobj28 0 obj<< /Type /Page /Parent 49 0 R /Resources 29 0 R /Contents 30 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj29 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj30 0 obj<< /Length 5520 >> stream
BT/F2 1 Tf10 0 0 10 279.67 744 Tm0 g/GS1 gs0 Tc0 Tw(-11-)Tj-20.767 -3.6 TD0.0426 Tw[(where this doesní)18(t)-292.6(happen is if a process conte)15(xt switches to itself.)-542.7(Ev)15(en in this case, a long runqueue can)]TJ0 -1.2 TD0.0809 Tw[(thrash and ush the TLB cache.)-580.9(Also, the TLB miss is synchronous with the cache line miss and a TLB)]TJT*0 Tw(miss will cause the prefetch to be ignored.)Tj2.5 -1.56 TD0.009 Tw[(A)74(v)74( )205(oid iterating through collections of 4K pages.)-509.1(It is a w)10(orst case cache and TLB scenario.)-509.1(Actually)]TJ-2.5 -1.2 TD0.0002 Tw[(it is a member of a dysfunctional f)10(amily of w)10(orst case scenarios.)-500.2(If addresses dif)25(fer by a po)25(wer of the cache)]TJT*0.0542 Tw[(line size, 64, 128, 256, ..., the)15(y)-304.2(compete for cache lines.)-554.2(Each increase in the e)15(xponent halv)15(es the number)]TJT*0.0568 Tw[(of cache lines a)20(v)25(ailable, do)25(wn to the minimum of the cache set size.)-556.8(If addresses dif)25(fer by a po)25(wer of the)]TJT*0.0706 Tw[(page size, 8192, 16384, ..., the)15(y)-320.6(compete for diminishing TLB slots. And while it is possible to add more)]TJT*0 Tw[(L2 on some systems, this isní)18(t)-250(possible for TLB slots.)]TJ/F4 1 Tf0 -2.4 TD0.25 Tw[(12. P)20(ollution)]TJ/F2 1 Tf0 -1.56 TD0.1165 Tw[(An application can use prefetching to o)15(v)15(erlap e)15(x)15(ecution with memory fetch.)-616.5(But once referenced, some)]TJ0 -1.2 TD0.08 Tw[(memory is used only once and shouldní)18(t)-330(e)25(vict more important cache lines and shouldní)18(t)-330(tak)10(e)-330(u)0(p)-330(space in)]TJT*0.0289 Tw[(the cache.)-529(If prefetch determines what cache lines will be needed, the cache control instructions determine)]TJT*0.0267 Tw[(what cache lines will be retained.)-526.7(W)40(ith respect to performance, a)20(v)20(oiding cache pollution is as important as)]TJT*0 Tw(prefetch.)Tj2.5 -1.56 TD0.1687 Tw[(As an e)15(xample, there is a problem with the cache line oriented task_struct.)-668.7(The for_each_task\(\))]TJ-2.5 -1.2 TD0.0778 Tw[(macro iterates through e)25(v)15(ery task, polluting the L2 cache, ushing good data and loading junk.)-577.9(The junk)]TJT*0 Tw[(data will mean further cache misses later)55(.)]TJ2.5 -1.56 TD0.0423 Tw[(On the Pentium II there is the non-temporal prefetchnta instruction.)-542.4(This loads a cache line into L1.)]TJ-2.5 -1.2 TD0.1333 Tw[(If it is already in L2, it is loaded from L2.)-633.3(But if it isní)18(t)-383.4(i)0(n)-383.4(L2, it isní)18(t)-383.4(loaded into L2.)-633.4(The Po)25(werPC)]TJT*0.0213 Tw[(doesní)18(t)-271.4(h)0(a)20(v)20( )266.3(e)-271.4(this sort of instruction.)-521.4(On that processor)40(,)-271.3(prefetch rst and then cache ush a junk cache line)]TJT*0.1192 Tw[(after using it.)-619.2(A)-369.2(junk cache line in this case w)10(ould be a process not on the runqueue.)-619.2(This reduces L2)]TJT*0 Tw[(cache pollution b)20(ut doesní)18(t)-250(a)20(v)20(oid it altogether as in the Pentium II prefetchnta e)15(xample.)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(inline void CacheLine_Flush\(unsigned long addr\))Tj0 -1.2 TD[({)-600(/)0(*)-600(n)0(o)-600(cache line flush on the x86 */ })]TJ0 -2.4 TD(inline void CacheLine_NT_Prefetch\(unsigned long addr\))Tj0 -1.2 TD0 Tc({)Tj2.4 -1.2 TD0.0001 Tc(asm volatile\("prefetchnta \(%0\)" :: "r" \(addr\)\);)Tj-2.4 -1.2 TD0 Tc(})Tj0 -2.4 TD0.0001 Tc[(#define for_each_task\(p\))-24600(\\)]TJ2.4 -1.2 TD[(for \(p = &init_task; p->next ? 1 : CacheLine_Flush\(p\),)-4200(\\)]TJ2.4 -1.2 TD[(p)-600(=)-600(p->next_task, CacheLine_NT_Prefetch\(p->next_task\),)-1800(\\)]TJT*[(p)-600(!)0(=)-600(&init_task;\))]TJ/F4 1 Tf-4.8 -2.4 TD0 Tc[(Figur)18(e)-250(18. )-250(P)20(ollution a)25(v)10(oiding pr)18(efetching)]TJ/F2 1 Tf-1.1 -2.16 TD0.0408 Tw[(Interrupt handlers and basic functions such as cop)10(ying i/o b)20(u)0(f)25(fer cache pages to and from user space)]TJ-2.5 -1.2 TD0.0772 Tw[(with memcp)10(y\(\) w)10(ould benet from non-temporal prefetch, cache ush and streaming store instructions to)]TJT*0.0495 Tw[(a)20(v)20(oid polluting L2.)-549.6(The Linux 2.4 x86 _mmx_memcp)10(y\(\) prefetches source cache lines.)-549.5(F)15(o)0(r)-299.5(a)-299.5(Pentium II,)]TJT*0 Tw[(it should use prefetchnta for both the source and destination in order to a)20(v)20(oid ushing and polluting L2.)]TJ2.5 -1.56 TD0.2011 Tw[(On the Pentium II, an initial preload is necessary to prime the TLB for an)15(y)-451.2(follo)25(wing prefetch)]TJ-2.5 -1.2 TD0.1265 Tw[(instructions. )-250.1(Otherwise)-376.6(the prefetch will be ignored.)-626.5(This is another ar)18(gument against iterating through)]TJT*0.1098 Tw[(lists or arrays of 4K structures: a preload is necessary to prime the TLB b)20(ut the preload will pollute the)]TJT*0 Tw(cache and there is no cache line ush instruction on the Pentium II.)Tj2.5 -1.56 TD0.0242 Tw[(As an e)15(xample, this is a Pentium II user mode cache line block cop)10(y)-274.3(for up to a 4K page.)-524.2(This func-)]TJ-2.5 -1.2 TD0.0741 Tw[(tion assumes that the source and destination will not be immediately reused.)-574.2(The prefetchnta instructions)]TJT*0.1146 Tw[(marks the source and destination cache lines as non temporal.)-614.6(A)-364.6(Pentium III v)15(ersion [Intel99b] can use)]TJT*0.0524 Tw[(mo)15(vntq and the streaming instructions.)-552.4(Ho)25(we)25(v)15(e)0(r)40(,)40( )-40(the streaming instructions require additional OS support)]TJETendstreamendobj31 0 obj<< /Type /Page /Parent 49 0 R /Resources 32 0 R /Contents 33 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj32 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj33 0 obj<< /Length 3868 >> stream
BT/F2 1 Tf10 0 0 10 279.67 744 Tm0 g/GS1 gs0 Tc0 Tw(-12-)Tj-20.767 -3.6 TD[(for sa)20(ving the 8 128-bit Katmai re)15(gisters at conte)15(xt switch.)-500(P)15(atches are a)20(v)25(ailable for 2.2.14+ [Ingo00].)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(void PII_BlockCopy\(char* src, char* dst, int count\))Tj0 -1.2 TD0 Tc({)Tj2.4 -1.2 TD0.0001 Tc1.8 Tw(char *limit;)Tj0 -2.4 TD0 Tw[(asm volatile\("" :: "r" \(*src\)\);)-1200(// prime the TLB for prefetch)]TJ0 -1.2 TD(asm volatile\("" :: "r" \(*dst\)\);)TjT*[(asm volatile\("" :: "r" \(*\(src + 4095\)\)\);)-1200(// src may span page)]TJT*(asm volatile\("" :: "r" \(*\(dst + 4095\)\)\);)Tj0 -2.4 TD(for \(limit = src + count; src < limit; src += 32, dst += 32\) {)Tj2.4 -1.2 TD[(asm volatile\("prefetchnta \(%0\)")-1200(:: "r" \(src\)\);)]TJT*[(asm volatile\("prefetchnta \(%0\)")-1200(:: "r" \(dst\)\);)]TJT*(asm volatile\("movq 00\(%0\),%%mm0" :: "r" \(src\)\);)TjT*(asm volatile\("movq 08\(%0\),%%mm1" :: "r" \(src\)\);)TjT*(asm volatile\("movq 16\(%0\),%%mm2" :: "r" \(src\)\);)TjT*(asm volatile\("movq 24\(%0\),%%mm3" :: "r" \(src\)\);)TjT*(asm volatile\("movq %%mm0,00\(%0\)" :: "r" \(dst\)\);)TjT*(asm volatile\("movq %%mm1,08\(%0\)" :: "r" \(dst\)\);)TjT*(asm volatile\("movq %%mm2,16\(%0\)" :: "r" \(dst\)\);)TjT*(asm volatile\("movq %%mm3,24\(%0\)" :: "r" \(dst\)\);)Tj-2.4 -1.2 TD0 Tc(})TjT*0.0001 Tc[(asm volatile\("emms"\);)-6600(// empty the MMX state)]TJ-2.4 -1.2 TD0 Tc(})Tj/F4 1 Tf0 -2.4 TD0.25 Tw[(Figur)18(e)-250(19. PII_BlockCopy\(\))]TJ/F2 1 Tf-1.1 -2.16 TD0.0153 Tw[(Another candidate is memset\(\).)-515.3(Idle task page clearing with memset\(\) has been tried b)20(ut it isní)18(t)-265.3(done)]TJ-2.5 -1.2 TD0.0693 Tw[(because of cache pollution.)-569.3(Memory stores ll up cache lines just as memory loads do.)-569.3(But cache pollu-)]TJT*0.0504 Tw[(tion can be a)20(v)20(oided by prefetchnta of the destination cache line follo)25(wed by the store.)-550.4(prefetchnta a priori)]TJT*0.0552 Tw[(tags the destination cache line as non cacheable.)-555.2(Another alternati)25(v)15(e)15( )-15.1(on)-305.3(the Po)25(werPC is marking the page)]TJT*-0.0001 Tc0.0001 Tw[(to be cleared as non-cacheable b)19.9(ut this is pri)24.9(vile)14.9(ged [Dougan99].)]TJ/F4 1 Tf0 -2.4 TD0 Tc0.25 Tw[(13. F)25(alse )250(Sharing)]TJ/F2 1 Tf0 -1.56 TD0.072 Tw[(A)-322.1(v)25(ariation on the theme of thrashing is F)15(alse Sharing [HennP)15(att96]. )-250(T)80(w)10(o)10( )-10(v)25(ariables contained in a single)]TJ0 -1.2 TD0.0363 Tw[(cache line are updated by tw)10(o)-286.3(dif)25(ferent CPUs on a multiprocessor)55(.)-536.3(When the rst CPU stores into its v)25(ari-)]TJT*0.0976 Tw[(able in its cache line cop)10(y)65(,)65( )-65.1(it)-347.7(in)40(v)40( )332.6(alidates the cache line cop)10(y)-347.7(i)0(n)-347.7(the second CPU.)-597.7(When the second CPU)]TJT*0.0731 Tw[(stores into its v)25(ariable, reloads the cache line, stores into it and in)40(v)25(alidates the cache line cop)10(y)-323.1(i)0(n)-323.1(the rst)]TJT*0 Tw[(CPU. )-250(This)-250(is thrashing.)-500(Allocating each v)25(ariable its o)25(wn cache line solv)15(es this problem.)]TJ2.5 -1.56 TD[(An e)15(xample from the scheduler)40(,)-250(sho)25(wing the problem and solution, is the current task array v)25(ariable:)]TJ/F1 1 Tf1.1 -3 TD0.0001 Tc[(struct task_struct *current_set[NR_CPUS];)-1800(// Linux 2.0.35)]TJ0 -2.4 TD[(static union {)-18000(// Linux 2.2.14)]TJ2.4 -1.2 TD(struct schedule_data {)Tj2.4 -1.2 TD(struct task_struct * curr;)TjT*(cycles_t last_schedule;)Tj-2.4 -1.2 TD[(})-600(schedule_data;)]TJT*(char __pad [SMP_CACHE_BYTES];)Tj-2.4 -1.2 TD[(})-600(aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0}}};)]TJ/F4 1 Tf0 -2.4 TD0 Tc[(Figur)18(e)-250(20. )-250(SMP)-250(schduler global data array)]TJETendstreamendobj34 0 obj<< /Type /Page /Parent 49 0 R /Resources 35 0 R /Contents 36 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj35 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj36 0 obj<< /Length 5181 >> stream
BT/F2 1 Tf10 0 0 10 279.67 744 Tm0 g/GS1 gs0 Tc0 Tw(-13-)Tj/F4 1 Tf-20.767 -3.6 TD0.25 Tw[(14. P)10(age )250(Coloring)]TJ/F2 1 Tf0 -1.56 TD0.1275 Tw[(T)80(w)80( )307.5(o)-377.6(memory lines separated by modulo 64K compete for just 4 L2 cache lines.)-627.5(W)40(ithin this 64K span,)]TJ0 -1.2 TD0.0901 Tw[(memory lines do not compete.)-590.1(Breaking this 64K up into 16 4K memory pages, each has a unique page)]TJT*-0.0001 Tc0.0001 Tw[(color)54.9(.)-500.1(P)-0.1(hysical memory pages of dif)24.9(ferent color doní)17.9(t)-250.1(compete for cache.)]TJ2.5 -1.56 TD0.0085 Tw[(Ideally if tw)9.9(o)-258.5(virtual memory pages will be used at the same time, the)14.9(y)-258.5(should be mapped to physical)]TJ-2.5 -1.2 TD0 Tc0.065 Tw[(pages of dif)25(ferent color [L)55(ynch93]. )-250(In)-315.1(particular)40(,)-315.1(simple direct mapped caches only ha)20(v)15(e)15( )-15.1(a)15( )-15.1(single suitable)]TJT*0.079 Tw[(cache line.)-579(P)15(ages 0,1,2,3 are in contiguous order and of dif)25(ferent page color)55(.)-579(P)15(ages 16,1,18,35 also each)]TJT*0 Tw[(ha)20(v)15(e)15( )-15(dif)25(ferent color)55(.)-500(P)15(age coloring also impro)15(v)15(e)0(s)-250(performance repeatability)65(.)]TJ2.5 -1.56 TD-0.0001 Tc0.1095 Tw[(Higher le)24.9(v)14.9(els of L2 associati)24.9(vity ar)17.9(gue against the e)14.9(xpense of supporting page coloring in the OS.)]TJ-2.5 -1.2 TD0 Tc0.1543 Tw[(Linux does not currently support page colored allocation because it w)10(ould be too e)15(xpensi)25(v)15(e)0(.)-654.2(FreeBSD)]TJT*0.0701 Tw[(attempts to allocate pages in color order and there has been discussion of this for Linux if an ine)15(xpensi)25(v)15(e)]TJT*0 Tw(page allocation approach can be found.)Tj2.5 -1.56 TD0.0894 Tw[(Ho)25(we)25(v)15(e)0(r)40(,)40( )-40.1(page coloring is supported in one special case: __get_dma_pages\(\).)-589.4(This k)10(ernel function)]TJ-2.5 -1.2 TD-0.0001 Tc0.0272 Tw[(allocates up to 32 physically contiguous pages.)-527.3(Therefore pages in color order)54.9(.)-527.3(A)-277.3(hint ag for the mmap\(\))]TJT*0 Tc0 Tw(system call could request this.)Tj/F4 1 Tf0 -2.4 TD0.25 Tw(15. Constraints)Tj/F2 1 Tf0 -1.56 TD0.1506 Tw[(Memory lines within aligned structures, perhaps aligned within pages, are constrained.)-650.6(The greater the)]TJ0 -1.2 TD0 Tw[(alignment constraint, the fe)25(wer eligible cache lines.)-500(Constraints cause conict cache misses.)]TJ2.5 -1.56 TD0.131 Tw[(F)15(o)0(r)-381(e)15(xample, in the task_struct case the important cache line is competing for 64 entries.)-631(This is)]TJ-2.5 -1.2 TD0.0317 Tw[(kno)25(wn as a hot cache line: it has a constraint problem.)-531.7(It w)10(ould be better for scheduling purposes to prune)]TJT*0.0727 Tw[(of)25(f)-322.7(the scheduling information and set up a slab allocated cache.)-572.8(The task_struct already has se)25(v)15(eral data)]TJT*0.1279 Tw[(structures hanging of)25(f)-378(o)0(f)-378(i)0(t)-378(t)0(o)-378(support sharing data structures among related threads. This w)10(ould be one)]TJT*0 Tw(more.)Tj2.5 -1.56 TD0.0666 Tw[(A)-316.5(slab is a page from which objects are allocated and freed.)-566.6(If a slab is full, another is constructed)]TJ-2.5 -1.2 TD0.0487 Tw[(and the object is allocated from it.)-548.7(Iterating through dynamic structures allocated from slabs suf)25(fers fe)25(wer)]TJT*0 Tw[(TLB misses because the structures are pack)10(ed into pages.)]TJ2.5 -1.56 TD0.0634 Tw[(F)15(o)0(r)-313.3(lar)18(ger structures, frequently accessed elds are often clumped together)40(,)-313.4(usually at the be)15(ginning)]TJ-2.5 -1.2 TD0.0374 Tw[(of the structure, causing a constraint problem.)-537.4(Since slabs are page aligned, the slab allocator balances the)]TJT*0 Tw[(cache load transparent to its clients.)-500(An of)25(fset which is a multiple of the cache line size is added as a bias.)]TJ/F4 1 Tf0 -2.4 TD0.25 Tw[(16. Back)-250(T)92(o)92( )158(The )250(Futur)18(e)]TJ/F2 1 Tf0 -1.56 TD0.029 Tw[(One solution for the scheduler is f)10(airly simple: for an aligned array of structures, if the size of the structure)]TJ0 -1.2 TD0 Tw[(is an odd multiple of the cache line size, it w)10(oní)18(t)-250(h)0(a)20(v)20( )245(e)-250(a)-250(constraint problem.)]TJ2.5 -1.56 TD[(Here is a single cache line v)15(ersion \(one is an odd number\) of the critical scheduling elds:)]TJ/F1 1 Tf1.1 -3 TD0.0001 Tc(struct proc {)Tj2.4 -1.2 TD[(unsigned char)-4800(priority;)]TJT*[(unsigned char)-4800(policy_has_cpu;)]TJT*[(unsigned short)-4200(processor; )-4200(//)-600(one)]TJT*[(unsigned short)-4200(pid;)]TJT*[(unsigned short)-4200(pgrp; )-7200(//)-600(two)]TJT*[(unsigned short)-4200(session; )-5400(//)-600(three - spare short)]TJT*[(struct mm_struct*)-2400(mm; )-8400(//)-600(four)]TJT*[(struct proc*)-5400(next_task; )-4200(//)-600(five)]TJT*[(struct proc*)-5400(pidhash_next; )-2400(//)-600(six)]TJT*[(struct proc*)-5400(run_next; )-4800(//)-600(seven)]TJT*[(struct task_struct*)-1200(task_struct; )-3000(//)-600(eight)]TJ-2.4 -1.2 TD(};)Tj/F4 1 Tf0 -2.4 TD0 Tc[(Figur)18(e)-250(21. )-250(Single)-250(cache line task_struct)]TJETendstreamendobj37 0 obj<< /Type /Page /Parent 49 0 R /Resources 38 0 R /Contents 39 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj38 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj39 0 obj<< /Length 3272 >> stream
BT/F2 1 Tf10 0 0 10 279.67 744 Tm0 g/GS1 gs0 Tc0 Tw(-14-)Tj-18.267 -3.6 TD0.0511 Tw[(Or it can be made into a tw)10(o)-301.2(cache line structure and a fe)25(w)-301.1(other task_struct elds can be added.)-551.1(If)]TJ-2.5 -1.2 TD0.0186 Tw[(you are f)10(amiliar with old Unix implementations, the cache line oriented task_struct is the rein)40(v)15(ention of the)]TJT*0 Tw[(proc structure.)-500(Quoting the 1977 Unix V)111(ersion 6 <unix/proc.h> header le:)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(/*)Tj0.6 -1.2 TD[(*)-600(One structure allocated per active)]TJT*[(*)-600(process. )-600(It)-600(contains all data needed)]TJT*[(*)-600(about the process while the)]TJT*[(*)-600(process may be swapped out.)]TJT*[(*)-600(Other per process data \(user.h\))]TJT*[(*)-600(i)0(s)-600(swapped with the process.)]TJT*(*/)Tj/F4 1 Tf-0.6 -2.4 TD0 Tc[(Figur)18(e)-250(22. )-250(<unix/pr)18(oc.h> fr)18(om 1977 Unix V)100(ersion 6)]TJ/F2 1 Tf-1.1 -2.16 TD0.0781 Tw[(The Linux scheduler searches the entire runqueue each reschedule.)-578.1(The FreeBSD runqueue is sim-)]TJ-2.5 -1.2 TD0.0377 Tw[(pler [McK)15(usick96]. )-250(It)-287.8(w)10(a)0(s)-287.8(deri)25(v)15(e)0(d)-287.8(from the 1978 V)135(AX/VMS rescheduling interrupt handler which w)10(as all)]TJT*0 Tw[(of 28 instructions. From the FreeBSD <k)10(ern/k)10(ern_switch.h> source le:)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(/*)Tj0.6 -1.2 TD[(*)-600(W)0(e)-600(have NQS \(32\) run queues per scheduling class.)-1200(For the)]TJT*[(*)-600(normal class, there are 128 priorities scaled onto these)]TJT*[(*)-600(3)0(2)-600(queues. )-600(New)-600(processes are added to the last entry in each)]TJT*[(*)-600(queue, and processes are selected for running by taking them)]TJT*[(*)-600(from the head and maintaining a simple FIFO arrangement.)]TJT*[(*)-600(Realtime and Idle priority processes have and explicit 0-31)]TJT*[(*)-600(priority which maps directly onto their class queue index.)]TJT*[(*)-600(When a queue has something in it, the corresponding bit is)]TJT*[(*)-600(set in the queuebits variable, allowing a single read to)]TJT*[(*)-600(determine the state of all 32 queues and then a ffs\(\) to find)]TJT*[(*)-600(the first busy queue.)]TJT*(*/)Tj/F4 1 Tf-0.6 -2.4 TD0 Tc[(Figur)18(e)-250(23. )-250(Fr)18(om Fr)18(eeBSD <k)10(er)15(n/k)10(er)15(n_switch.h>)]TJ/F2 1 Tf-1.1 -2.16 TD[(A)-250(uniprocessor reschedule is simplicity:)]TJ/F1 1 Tf1.1 -3 TD0.0001 Tc[(static struct rq)-2400(queues[32];)]TJ0 -1.2 TD[(static u_int32_t)-2400(queuebits;)]TJT*9.6 Tw(int qi;)Tj0 -2.4 TD0 Tw(qi = \(current->priority >> 2\);)Tj0 -1.2 TD(SetBit\(&queuebits, qi\);)TjT*(InsertQueue\(&queues[current->priority], current\);)Tj0 -2.4 TD(qi = FindFirstSet\(queuebits\);)Tj0 -1.2 TD(if \(RemoveQueue\(&queues[qi], &current\) == Q_EMPTY\))Tj2.4 -1.2 TD(ClearBit\(&queuebits, qi\);)Tj/F4 1 Tf-2.4 -2.4 TD0 Tc[(Figur)18(e)-250(24. )-250(Queueing)-250(scheduler context switch)]TJ/F2 1 Tf-1.1 -2.16 TD0.0644 Tw[(A)-314.5(best of breed Linux scheduler w)10(ould use the FreeBSD runqueue and support the Linux scheduler)]TJ-2.5 -1.2 TD0 Tw[(policies of the goodness\(\) function: soft realtime scheduling, SMP CPU af)25(nity and thread batching.)]TJETendstreamendobj40 0 obj<< /Type /Page /Parent 49 0 R /Resources 41 0 R /Contents 42 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj41 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F1 46 0 R /F2 55 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj42 0 obj<< /Length 4342 >> stream
BT/F2 1 Tf10 0 0 10 279.67 744 Tm0 g/GS1 gs0 Tc0 Tw(-15-)Tj/F4 1 Tf-20.767 -3.6 TD0.25 Tw[(17. In)-250(Summary)55(,)-250(Y)111(ou )250(Ar)18(e)-250(Doomed)]TJ/F2 1 Tf0 -1.56 TD0.0368 Tw[(Cache programming is a collection of arcana and techniques.)-536.8(What follo)25(ws is an attempt to or)18(ganize them)]TJ0 -1.2 TD0 Tw(and the nal chart is an attempt to distill them.)Tj/F4 1 Tf0 -2.4 TD0.25 Tw[(17.1. Alignment)-250(and )250(P)10(acking)]TJ/F2 1 Tf0 -1.56 TD0 Tw[(When laying out structures for portable softw)10(are, assume a 32 byte cache line.)]TJT*0.0607 Tw[(F)15(o)0(r)-310.7(arrays, the base of an array should be cache aligned.)-560.7(The size of a structure must be either an inte)15(ger)]TJ0 -1.2 TD0.08 Tw[(multiple or an inte)15(ger di)25(visor of the cache line size.)-580.1(If these conditions hold, then by induction each ele-)]TJT*0.0641 Tw[(ment of the array the cache line will be aligned or pack)10(ed. )-250.1(Link)10(ed structures are analogous for alignment)]TJT*0 Tw[(b)20(u)0(t)-250(doní)18(t)-250(h)0(a)20(v)20( )245(e)-250(the size constraint.)]TJ0 -1.56 TD[(T)80(o)80( )-80(specify a cache line alignment for types or v)25(ariables with gcc, use the aligned attrib)20(ute:)]TJ/F1 1 Tf3.6 -3 TD0.0001 Tc(struct Box {)Tj2.4 -1.2 TD1.8 Tw(int element;)Tj-2.4 -1.2 TD0 Tw[(})-600(__attribute__ \(\(aligned\(SMP_CACHE_BYTES\)\)\);)]TJ/F4 1 Tf0 -2.4 TD0 Tc[(Figur)18(e)-250(25. )-250(Cache)-250(alignment of structur)18(e)-250(types)]TJ/F2 1 Tf-3.6 -2.16 TD[(In an application, to allocate cache aligned memory)65(,)-250(use memalign\(32, size\) instead of malloc\(size\).)]TJ0 -1.56 TD[(Data structures change.)-500(Write a program which v)25(alidates packing, alignments and w)10(orst case scenarios.)]TJ/F4 1 Tf0 -2.4 TD0.25 Tw[(17.2. Cache)-250(F)25(ootprint)]TJ/F2 1 Tf0 -1.56 TD0 Tw[(Reduce your cache footprint.)-500(P)15(araphrasing the Elements of Style [Strunk99]:)]TJ3.6 -2.4 TD[()-1500(Omit needless w)10(ords.)]TJ0 -1.2 TD[()-1500(K)25(eep related w)10(ords together)55(.)]TJT*[()-1500(D)0(o)-250(not break cache lines in tw)10(o.)]TJT*[()-1500(A)74(v)20(oid a succession of loose cache lines.)]TJT*[()-1500(Mak)10(e)-250(the cache line the unit of composition.)]TJ-3.6 -2.76 TD0.03 Tw[(When repeatedly iterating through a lar)18(ge array or list of structures, be careful of cache considerations.)-530(As)]TJ0 -1.2 TD0.1059 Tw[(the number of elements increases and approaches the number of cache lines a)20(v)25(ailable, cache misses will)]TJT*0 Tw(gradually increase to the point of thrashing.)Tj0 -1.56 TD0.0383 Tw[(Ignoring page color issues for no)25(w)65(,)65( )-65(lar)18(ge memory scans approaching the size of the cache, ush the cache.)]TJ0 -1.2 TD0 Tw[(Lar)18(ge memory copies approaching half of the cache, ush the cache.)-500(Both pollute the cache with junk.)]TJ0 -1.56 TD0.0123 Tw[(A)74(v)74( )208.3(oid polluting the cache with junk data.)-512.3(If a cache line w)10(oní)18(t)-262.3(b)0(e)-262.3(reused for some time, ush it.)-512.3(If stream-)]TJ0 -1.2 TD0.0779 Tw[(ing through a lot of data, non-temporally prefetch source and destination to a)20(v)20(oid polluting the L2 cache.)]TJT*0 Tw(Otherwise you may pollute the cache with junk data entailing further cache misses.)Tj0 -1.56 TD0.0489 Tw[(Interrupt handlers should a)20(v)20(oid cache pollution by using non-temporal prefetch, cache ush and streaming)]TJ0 -1.2 TD0 Tw(store instructions.)Tj0 -1.56 TD0.0262 Tw[(Shared libraries allo)25(w)-276.3(man)15(y)-276.3(processes to share the same instruction memory)65(.)-526.3(This creates more opportuni-)]TJ0 -1.2 TD0 Tw(ties for cache sharing and less cache competition.)Tj/F4 1 Tf0 -2.4 TD0.25 Tw[(17.3. Pr)18(efetch)]TJ/F2 1 Tf0 -1.56 TD0.056 Tw[(If you are w)10(orking on one cache line and then another)40(,)-306(prefetch the ne)15(xt cache line before doing the w)10(ork)]TJ0 -1.2 TD0 Tw[(on the rst.)-500(This o)15(v)15(erlaps the w)10(ork and the prefetch.)-500(Prefetch hides memory latenc)15(y)65(.)]TJ0 -1.56 TD0.0138 Tw[(The prefetch scheduling distance for memory is about 20-25 instructions.)-513.9(The prefetch scheduling distance)]TJ0 -1.2 TD0 Tw[(for L2 is about 6-10 instructions.)-500(These are v)15(ery rough guides.)]TJETendstreamendobj43 0 obj<< /Type /Page /Parent 49 0 R /Resources 44 0 R /Contents 45 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj44 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F2 55 0 R /F3 57 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj45 0 obj<< /Length 6678 >> stream
BT/F2 1 Tf10 0 0 10 279.67 744 Tm0 g/GS1 gs0 Tc0 Tw(-16-)Tj/F4 1 Tf-20.767 -3.6 TD[(17.4. )-250(W)75(orst Case Scenarios)]TJ/F2 1 Tf0 -1.56 TD0.0538 Tw[(A)74(v)74( )249.8(oid w)10(orst case scenarios: for associati)25(v)15(e)15( )-15.1(cache memory)65(,)-303.9(i)0(f)-303.9(addresses dif)25(fer by a po)25(wer of the cache line)]TJ0 -1.2 TD0.0619 Tw[(size, 64, 128, 256, ..., the)15(y)-311.9(are constrained to use fe)25(wer cache lines.)-561.9(Each increase in the e)15(xponent halv)15(es)]TJT*0.0529 Tw[(the number of cache lines a)20(v)25(ailable, do)25(wn to the minimum of the cache set size.)-552.9(Similarly)65(,)-302.9(o)0(n)-302.9(a)0(n)-302.9(associa-)]TJT*0.0198 Tw[(ti)25(v)15(e)15( )-15(TLB, if addresses dif)25(fer by a po)25(wer of the page size, 8192, 16384, ..., the)15(y)-269.8(are constrained to use fe)25(wer)]TJT*0 Tw[(TLB slots with each increase in e)15(xponent.)]TJ0 -1.56 TD[(F)15(alse Sharing - a)20(v)20(oid updating a cache line shared between tw)10(o)-250(o)0(r)-250(more CPUs.)]TJT*0.0967 Tw[(Constraints - bias the allocation of small objects by a multiple cache line of)25(fset to a)20(v)20(oid hot cache lines.)]TJ0 -1.2 TD0 Tw[(The slab allocator does this.)-500(F)15(o)0(r)-250(a)0(n)-250(array of structures, use odd multiples of the cache line size.)]TJ0 -1.56 TD-0.0001 Tc0.0001 Tw[(Coloring - if necessary)64.9(,)-250.1(allocate physical memory pages in color order)54.9(.)-500.1(The)14.9(y)-250.1(w)9.9(oní)17.9(t)-250.1(compete for cache.)]TJT*0 Tc0.0171 Tw[(If you need uniquely colored pages in the k)10(ernel or in a module, use __get_dma_pages\(gfp_mask, order\) to)]TJ0 -1.2 TD-0.0001 Tc0.0001 Tw[(allocate up to 32 pages, usually 128K.)-500.1(The)14.9(y)-250.1(will be physically contiguous and therefore in color order)54.9(.)]TJ/F4 1 Tf0 -2.4 TD0 Tc0.25 Tw(17.5. General)Tj0 -2.16 TD1.25 Tw[(Cache )1250(P)20(olicy Cache)-250(Miss Description)-11024(Suggestion)]TJET0 G1 J 1 j 0.4 w 10 M []0 d1 i 72.06 507.9 m496.38 507.9 lSBT/F2 1 Tf10 0 0 10 72 498.4 Tm0 Tw[(load )-5035(compulsory)-1694(rst access)-11608(align, pack and prefetch)]TJ0 -1.2 TD[(placement )-2647(conict)-3416(access mismatched to cache design)-1916(a)20(v)20(oid w)10(orst cases)]TJT*[(replacement )-1870(capacity)-3084(w)10(orking set is lar)18(ger than cache size)-1500(a)20(v)20(oid cache pollution)]TJT*[(store )-4813(combine)-2972(single store or lar)18(ge streaming store)-1683(all of the abo)15(v)15(e)0(,)-250(combine writes,)]TJ29.391 -1.2 TD(use non temporal instructions)Tj/F4 1 Tf-29.391 -3 TD0.25 Tw[(18. Ackno)10(wledgements)]TJ/F2 1 Tf0 -1.56 TD0 Tw[(Scott Maxwell, Da)20(vid Sifry and Dan Sears suf)25(fered through and impro)15(v)15(e)0(d)-250(earlier drafts.)]TJ/F4 1 Tf0 -2.64 TD0.25 Tw[(19. Refer)18(ences)]TJ/F2 1 Tf0 -1.56 TD0.182 Tw[([Bonwick94] Jef)25(f)-432(Bonwick, The Slab Allocator:)]TJ0 -1.2 TD0.3697 Tw[(An Object-Caching K)25(ernel Memory Allocator)40(,)]TJ/F3 1 TfT*0.6115 Tw[(Usenix Summer 1994 T)92(e)0(c)15(hnical Confer)37(ence)]TJ/F2 1 Tf19.91 0 TD0 Tw(,)Tj-19.91 -1.2 TD(1994.)Tj0 -1.56 TD0.333 Tw[([Bryant00] Ray Bryant and Bill Hartner)40(,)-583(J)0(a)20(v)25(a)]TJ0 -1.2 TD0.3842 Tw[(technology)65(,)-634.2(threads, and scheduling in Linux:)]TJT*0.0881 Tw[(P)15(atching the k)10(ernel scheduler for better Ja)20(v)25(a)25( )-25.1(per)20(-)]TJT*0 Tw(formance,)Tj/F3 1 Tf4.276 0 TD[(IBM De)15(veloper W)92(orks)]TJ/F2 1 Tf8.89 0 TD[(,)-250(January 2000.)]TJ-13.166 -1.56 TD-0.0002 Tc0.2956 Tw[([Dougan99] Cort Dougan, P)14.8(aul Mack)9.8(erras and)]TJ0 -1.2 TD0 Tc0.251 Tw[(V)60(ictor Y)110(odaik)10(en, Optimizing the Idle T)80(ask and)]TJT*0.0369 Tw[(Other MMU T)35(ricks,)]TJ/F3 1 Tf8.4076 0 TD[(Thir)37(d)-286.8(Symposium on Oper)15(at-)]TJ-8.4076 -1.2 TD0 Tw(ing Systems Design and Implementation)Tj/F2 1 Tf16.054 0 TD[(,)-250(1999.)]TJ-16.054 -1.56 TD0.0195 Tw[([Handy98] Jim Handy)65(,)-269.5(The Cache Memory Book,)]TJ0 -1.2 TD0 Tw(2nd edition, Academic Press, 1998.)Tj0 -1.56 TD0.2522 Tw[([HennP)15(att96] John Hennessy and Da)20(vid P)15(atter)20(-)]TJ0 -1.2 TD-0.0001 Tc0.0705 Tw[(son, Computer Architecture, 2nd edition, Mor)17.9(gan)]TJT*0 Tc0 Tw[(Kauf)25(fman, 1996.)]TJ0 -1.56 TD0.0925 Tw[([Hone)15(yman99] Peter Hone)15(yman et al, The Linux)]TJ0 -1.2 TD-0.0001 Tc0.7391 Tw[(Scalability Project, Uni)24.9(v)14.9(ersity of Michigan)]TJT*0 Tc0 Tw(CITI-99-4, 1999.)Tj0 -1.56 TD1.3164 Tw[([Ingo00] Ingo Mulnar)40(,)]TJ/F3 1 Tf13.1851 0 TD0 Tw[(http://people)15(.r)37(ed-)]TJ-13.1851 -1.2 TD[(hat.com/mingo/mmx-patc)15(hes/)]TJ/F2 1 Tf0 -1.56 TD0.1435 Tw[([Intel99a] Intel Architecture Optimization Refer)20(-)]TJ0 -1.2 TD0 Tw(ence Manual,)Tj/F3 1 Tf5.637 0 TD[(de)15(veloper)111(.intel.com)]TJ/F2 1 Tf7.761 0 TD[(,)-250(1999.)]TJ9.642 31.68 TD0.26 Tw[([Intel99b] Block Cop)10(y)-510(Using Intel Pentium III)]TJ0 -1.2 TD0.3985 Tw(Processor Streaming SIMD Extensions,)Tj/F3 1 Tf17.732 0 TD0 Tw[(de)15(vel-)]TJ-17.732 -1.2 TD[(oper)111(.intel.com)]TJ/F2 1 Tf5.666 0 TD[(,)-250(1999.)]TJ-5.666 -1.56 TD0.1541 Tw[([L)55(ynch93] W)40(illiam L. L)55(ynch, The Interaction of)]TJ0 -1.2 TD0.3354 Tw[(V)60(irtual Memory and Cache Memory)65(,)-585.4(Stanford)]TJT*0 Tw(CSL-TR-93-587, 1993.)Tj0 -1.56 TD0.1598 Tw[([Maxwell99] Scott Maxwell, Linux Core K)25(ernel)]TJ0 -1.2 TD0 Tw[(Commentary)65(,)-250(Coriolis, 1999.)]TJ0 -1.56 TD0.1295 Tw[([McK)15(usick96] Kirk McK)15(usick et al, The Design)]TJ0 -1.2 TD0.3768 Tw(and Implementation of the 4.4BSD Operating)TjT*0 Tw[(System, Addison W)80(esle)15(y)65(,)65( )-65(1996.)]TJ0 -1.56 TD0.021 Tw([Schimmel94] Curt Schimmel, UNIX Systems for)Tj0 -1.2 TD0.082 Tw(Modern Architectures: Symmetric Multiprocesss-)TjT*0.1286 Tw[(ing and Caching for K)25(ernel Programmers, Addi-)]TJT*0 Tw[(son W)80(esle)15(y)65(,)65( )-65(1994.)]TJ0 -1.56 TD0.0462 Tw[([Se)25(w)10(ard] Julian Se)25(w)10(ard, Cacheprof,)]TJ/F3 1 Tf14.833 0 TD0 Tw[(www)74(.cac)15(hep-)]TJ-14.833 -1.2 TD[(r)45(o)0(f)15(.or)37(g)]TJ/F2 1 Tf0 -1.56 TD0.0976 Tw[([Shanle)15(y97] T)80(om Shanle)15(y)65(,)65( )-65.1(Pentium Pro and Pen-)]TJ0 -1.2 TD0.1518 Tw(tium II System Architecture: 2nd edition, Mind-)TjT*0 Tw(share, 1997.)Tj0 -1.56 TD0.1766 Tw([Stallman00] Richard Stallman, Using and Port-)Tj0 -1.2 TD0.2688 Tw[(ing GNU CC: for v)15(ersion 2.95, Free Softw)10(are)]TJT*0 Tw[(F)15(oundation, 2000.)]TJ0 -1.56 TD0.2353 Tw([Strunk99] Strunk and White, The Elements of)Tj0 -1.2 TD0 Tw(Style, 4th edition, Allyn and Bacon, 1999.)TjETendstreamendobj46 0 obj<< /Type /Font /Subtype /Type1 /Encoding /WinAnsiEncoding /BaseFont /Courier >> endobj47 0 obj<< /Type /Pages /Kids [ 64 0 R 53 0 R 1 0 R 4 0 R 7 0 R 10 0 R ] /Count 6 /Parent 48 0 R >> endobj48 0 obj<< /Type /Pages /Kids [ 47 0 R 71 0 R 49 0 R ] /Count 17 >> endobj49 0 obj<< /Type /Pages /Kids [ 28 0 R 31 0 R 34 0 R 37 0 R 40 0 R 43 0 R ] /Count 6 /Parent 48 0 R >> endobj50 0 obj<< /CreationDate (D:20000825145213)/Producer (Acrobat Distiller 4.05 for Macintosh)/ModDate (D:20000907184225-07'00')>> endobj52 0 obj<< /Type /Catalog /Pages 48 0 R /Outlines 63 0 R >> endobj53 0 obj<< /Type /Page /Parent 47 0 R /Resources 54 0 R /Contents 59 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj54 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F2 55 0 R /F3 57 0 R /F4 58 0 R >> /ExtGState << /GS1 60 0 R >> >> endobj55 0 obj<< /Type /Font /Subtype /Type1 /Encoding 56 0 R /BaseFont /Times-Roman >> endobj56 0 obj<< /Type /Encoding /BaseEncoding /WinAnsiEncoding /Differences [ 17 /Zcaron /zcaron /Lslash /lslash /minus /fraction /breve /caron /dotlessi /dotaccent /hungarumlaut /ogonek /ring /fi /fl ] >> endobj57 0 obj<< /Type /Font /Subtype /Type1 /Encoding /WinAnsiEncoding /BaseFont /Times-Italic >> endobj58 0 obj<< /Type /Font /Subtype /Type1 /Encoding /WinAnsiEncoding /BaseFont /Times-Bold >> endobj59 0 obj<< /Length 5397 >> stream
BT/F4 1 Tf12 0 0 12 177.288 669 Tm0 g/GS1 gs0 Tc0 Tw[(The Elements of Cache Pr)18(ogramming Style)]TJ/F3 1 Tf10 0 0 10 259.02 645 Tm[(Chris B. Sear)10(s)]TJ/F2 1 Tf0.5375 -1.8 TD(Google Inc.)Tj/F3 1 Tf-16.7395 -2.76 TD[(Those who cannot r)37(emember the past ar)37(e)-250(condemned to r)37(epeat it)]TJ/F2 1 Tf26.136 0 TD[(-)-250(Geor)18(ge Santayana)]TJ/F4 1 Tf-28.636 -3.6 TD0.25 Tw[(1. Intr)18(oduction)]TJ/F2 1 Tf0 -1.56 TD0.009 Tw[(Cache memories w)10(ork on the carrot and stick principle.)-509(The carrot is the Principle of Locality and the stick)]TJ0 -1.2 TD0.0283 Tw[(is Amdahlí)55(s)-278.3(L)0(a)15(w)65(.)-528.3(The Principle of Locality says that programs tend to cluster their memory references.)-528.4(A)]TJT*-0.0001 Tc0.1041 Tw[(memory location referenced once is lik)9.9(ely to be referenced again: temporal locality)64.9(.)-604.1(A)-354.1(memory location)]TJT*0 Tc0.0568 Tw[(nearby a referenced location is lik)10(ely to be referenced soon: spatial locality)65(.)-556.9(And Amdahlí)55(s)-306.9(L)0(a)15(w)15( )-15.1(says that)]TJT*-0.0001 Tc0.0436 Tw[(the performance impro)14.9(v)14.9(ement to be gained from using some f)9.9(aster component is limited by the fraction of)]TJT*0 Tc0 Tw[(time the f)10(aster component is used.)-500(In this case, CPU and cache are f)10(ast components and memory is slo)25(w)65(.)]TJ2.5 -1.56 TD0.0591 Tw[(If your program adheres to the Principle of Locality)65(,)-309.1(i)0(t)-309.1(benets from f)10(ast cache memory and runs at)]TJ-2.5 -1.2 TD0.021 Tw[(processor speed.)-521.1(If it doesní)18(t, it is held accountable to Amdahlí)55(s)-271(L)0(a)15(w)15( )-15(and runs at memory speed.)-521(Hit rates)]TJT*0 Tw[(ha)20(v)15(e)15( )-15(to)-250(be)-250(v)15(ery high, say 98%, before incremental increases in processor speed are e)25(v)15(en)-250(noticeable.)]TJ2.5 -1.56 TD0.0327 Tw[(Amdahlí)55(s)-282.7(L)0(a)15(w)15( )-15(has a special circumstances penalty for multiprocessors [Schimmel94].)-532.8(Thrashing on)]TJ-2.5 -1.2 TD0.0712 Tw[(a)-321.3(multiprocessor can slo)25(w)-321.3(d)0(o)25(w)0(n)-321.3(all of the processors.)-571.2(The)15(y)-321.2(each w)10(ait for each other w)10(aiting for memory)]TJT*0.0133 Tw[(and the le)25(v)15(erage a multiprocessor of)25(fers w)10(orks in re)25(v)15(erse. )-250.1(Adherence)-263.4(to the Principle of Locality for multi-)]TJT*0 Tw[(processors, b)20(ut not to the point of F)15(alse Sharing, isní)18(t)-250(just a nicety)65(,)-250(i)0(t)-250(i)0(s)-250(a)-250(necessity)65(.)]TJ2.5 -1.56 TD0.0689 Tw[(The object of cache programming style is to increase this locality)65(.)-568.9(I)0(t)-318.9(i)0(s)-318.9(important to understand the)]TJ-2.5 -1.2 TD0.031 Tw[(structure and beha)20(vior of caches, b)20(ut it is more important to kno)25(w)-281(the basic properties to tak)10(e)-281(adv)25(antage of)]TJT*0 Tw[(and the w)10(orst cases to a)20(v)20(oid. )-250(This)-250(article goes into details and the summary pro)15(vides guidelines.)]TJ/F4 1 Tf0 -2.4 TD0.25 Tw[(2. An)-250(Example)]TJ/F2 1 Tf0 -1.56 TD0.1033 Tw[(As a running e)15(xample, I am going to look at Linux [Maxwell99] and at the scheduler in particular)55(.)-603.3(The)]TJ0 -1.2 TD0.0053 Tw[(idea is to modify data structures and code just slightly)65(,)-255.3(trying to use the cache more ef)25(fecti)25(v)15(ely)65(.)-505.4(Hopefully I)]TJT*0 Tw[(will achie)25(v)15(e)15( )-15(tw)10(o)10( )-10(goals: a practical tutorial on caches and some performance impro)15(v)15(ements for Linux.)]TJ2.5 -1.56 TD0.0154 Tw(Instead of talking about cache memory systems in general, I will mostly use my circa 1998 350 MHz)Tj-2.5 -1.2 TD0 Tw[(Deschutes Pentium II system as a specic e)15(xample. )-250(It)-250(has these characteristics:)]TJ/F4 1 Tf3.6 -2.4 TD1.306 Tw[(Storage Size)-3403(Latency )-347(Notes)]TJET0 G1 J 1 j 0.4 w 10 M []0 d1 i 108.06 237.18 m399.66 237.18 lSBT/F2 1 Tf10 0 0 10 108 227.8 Tm0 Tw[(re)15(gister )-1599(32)-250(bytes )-1514(3)-250(ns )-3458(re)15(gister renaming le)]TJ0 -1.2 TD[(L1 )-3472(32)-250(K)-3153(6)-250(ns )-3458(on-chip,)-250(half Pentium-II clock rate)]TJT*[(L2 )-3472(256)-250(K)-2653(5)0(7)-250(n)0(s)-3208(o)0(f)25(f-chip, on-package [Intel99a])]TJT*[(memory )-1250(64)-250(MB )-2069(162)-250(ns )-2458(100)-250(MHz SDRAM, single bank)]TJT*2.916 Tw[(disk 10)-250(GB )680(9)-250(ms )-264(DMA)-250(IDE)]TJT*1.316 Tw[(netw)10(ork whate)25(v)15(e)0(r)-1500(whene)25(v)15(e)0(r)-1500(56K )1316(PPP)]TJ/F4 1 Tf0 -1.8 TD0 Tw[(Figur)18(e)-250(1)0(.)-500(Storage hierar)18(ch)15(y)-250(sizes and latencies)]TJ/F2 1 Tf-1.1 -2.16 TD0.0931 Tw[(These numbers are subject to change.)-593.1(CPU performance impro)15(v)15(e)0(s)-343.2(a)0(t)-343.2(about 55%/year and memory)]TJ-2.5 -1.2 TD0.0176 Tw[(impro)15(v)15(e)0(s)-267.6(a)0(t)-267.6(about 7%/year)55(.)-517.6(Memory is big, cheap and slo)25(w)-267.6(while cache is small, f)10(ast and e)15(xpensi)25(v)15(e)0(.)-517.5(Dou-)]TJT*0.1614 Tw[(ble Data Rate SDRAM and Ramb)20(us, when a)20(v)25(ailable, will impr)]TJ26.5796 0 TD-0.015 Tc0 Tw(ove )Tj1.8254 0 TD0 Tc0.1615 Tw[(memory bandwidth b)20(ut not latenc)15(y)65(.)]TJ-28.405 -1.2 TD0.0823 Tw[(These impro)15(v)15(ements will help more predictable applications lik)10(e)-332.3(multimedia b)20(ut not less predictable pro-)]TJT*0 Tw(grams such as Linux.)TjETendstreamendobj60 0 obj<< /Type /ExtGState /SA false /SM 0.02 /TR /Identity >> endobj63 0 obj<< /Count 0 /Type /Outlines >> endobj64 0 obj<< /Type /Page /Parent 47 0 R /Resources 66 0 R /Contents 65 0 R /MediaBox [ 0 0 612 792 ] /CropBox [ 0 0 612 792 ] /Rotate 0 >> endobj65 0 obj<< /Length 3388 >> stream
BT/F2 1 Tf15.84 0 0 15.84 237.6 706.578 Tm0 g/GS1 gs0.0001 Tc0.0007 Tw(USENIX Association)Tj24 0 0 24 221.28 598.578 Tm0 Tc0.0003 Tw(Proceedings of the)Tj-4.98 -1.25 TD0.0002 Tw[(4th )48.2(Annual )44.2(Linux Showcase & Conference,)]TJ7.23 -1.25 TD0 Tw(Atlanta)Tj15.84 0 0 15.84 251.28 496.5781 Tm0.0004 Tw(Atlanta, Georgia, USA)Tj0.2879 -1.2727 TD-0.0001 Tc0.0001 Tw[(October 10 )113.6(–14, 2000)]TJET/GS2 gs1 i 284.204 140.838 m281.264 140.838 277.838 142.839 277.838 147.235 c277.838 175.308 l283.054 175.308 l283.054 147.678 l283.054 145.906 283.595 145.513 284.677 145.513 c285.711 145.513 286.252 145.906 286.252 147.678 c286.252 175.308 l291.468 175.308 l291.468 147.235 l291.468 143.714 288.7 140.801 285.356 140.801 c284.204 140.838 lf302.626 152.065 m302.55 153.268 301.565 154.252 v300.581 155.236 295.246 160.572 y294.316 161.28 294.316 162.705 v294.285 170.376 l294.285 172.904 296.154 175.264 299.525 175.31 c302.625 175.31 l305.996 175.264 307.865 172.904 307.865 170.376 c307.865 161.814 l302.649 161.814 l302.649 168.457 l302.649 170.229 302.107 170.622 301.025 170.622 c299.992 170.622 299.45 170.229 299.45 168.457 c299.423 164.435 l299.423 163.011 300.352 162.303 y305.82 156.836 306.804 155.852 v307.788 154.867 307.865 153.665 y307.791 145.759 l307.791 143.232 305.922 140.871 302.552 140.825 c299.451 140.825 l296.081 140.871 294.212 143.232 294.212 145.759 c294.212 154.321 l299.428 154.321 l299.428 147.678 l299.428 145.906 299.969 145.513 301.052 145.513 c302.085 145.513 302.626 145.906 302.626 147.678 c302.626 152.065 lf310.734 140.868 m310.734 175.308 l322.346 175.308 l322.346 171.002 l315.95 171.002 l315.95 161.997 l322.1 161.997 l322.1 157.421 l315.95 157.421 l315.95 145.444 l322.445 145.444 l322.445 140.868 l310.734 140.868 lf328.784 175.315 m324.405 175.315 l324.405 140.871 l329.116 140.871 l329.116 160.554 l336.214 140.871 l340.495 140.871 l340.495 175.315 l335.681 175.315 l335.681 157.601 l328.784 175.315 lf343.657 175.315 5.216 -34.444 ref350.635 140.861 m355.014 157.995 l351.028 175.316 l356.441 175.316 l357.425 170.739 358.459 166.163 358.901 161.488 c359.049 161.488 l359.295 165.13 360.181 168.623 361.116 172.068 c361.952 175.316 l366.824 175.316 l362.592 159.323 l366.922 140.868 l361.559 140.868 l359.689 148.744 l359.098 151.499 358.606 155.633 358.557 155.584 c358.409 150.417 356.638 145.929 355.506 140.861 c350.635 140.861 lfBT/F3 1 Tf3.3 0 0 3.3 279.1799 137.4331 Tm(THE ADVANCED COMPUTING SYSTEMS ASSOCIATION)Tj/F2 1 Tf8.88 0 0 8.88 72 115.938 Tm/GS1 gs0 Tc0.0002 Tw[(© 2000 by The USENIX Association)-4396.3(All Rights Reserved)-5078.2(For more information about the USENIX Association:)]TJ0 -1.3784 TD0 Tw[(Phone: 1 510 528 8649)-4505.8(FAX: 1 510 548 5738)-4411.2(Email: office@usenix.org)-4825.2(WWW: )]TJ0 0 1 rg45.5222 0 TD(http://www.usenix.org)TjET476.16 102.498 79.92 0.48 refBT8.88 0 0 8.88 189.12 91.4581 Tm0 g0.0002 Tw(Rights to individual papers remain with the author or the author's employer.)Tj-5.7838 -1.4054 TD0.0003 Tw( Permission is granted for noncommercial reproduction of the work for educational or research purposes.)Tj-1.2162 -1.4054 TD0.0002 Tw(This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.)TjETendstreamendobj66 0 obj<< /ProcSet [ /PDF /Text ] /Font << /F2 70 0 R /F3 69 0 R >> /ExtGState << /GS1 68 0 R /GS2 67 0 R >> >> endobj67 0 obj<< /Type /ExtGState /SA true /SM 0.02 /TR /Identity >> endobj68 0 obj<< /Type /ExtGState /SA false /SM 0.02 /TR /Identity >> endobj69 0 obj<< /Type /Font /Subtype /Type1 /Encoding /WinAnsiEncoding /BaseFont /Helvetica >> endobj70 0 obj<< /Type /Font /Subtype /Type1 /Encoding /MacRomanEncoding /BaseFont /Times-Roman >> endobj71 0 obj<< /Type /Pages /Kids [ 13 0 R 16 0 R 19 0 R 22 0 R 25 0 R ] /Count 5 /Parent 48 0 R >> endobjxref0 72 0000000051 65535 f 0000000016 00000 n 0000000167 00000 n 0000000280 00000 n 0000007640 00000 n 0000007791 00000 n 0000007915 00000 n 0000011531 00000 n 0000011682 00000 n 0000011806 00000 n 0000015866 00000 n 0000016020 00000 n 0000016145 00000 n 0000021426 00000 n 0000021580 00000 n 0000021705 00000 n 0000024057 00000 n 0000024211 00000 n 0000024336 00000 n 0000029544 00000 n 0000029698 00000 n 0000029823 00000 n 0000033755 00000 n 0000033909 00000 n 0000034034 00000 n 0000037645 00000 n 0000037799 00000 n 0000037924 00000 n 0000043809 00000 n 0000043963 00000 n 0000044088 00000 n 0000049662 00000 n 0000049816 00000 n 0000049941 00000 n 0000053863 00000 n 0000054017 00000 n 0000054142 00000 n 0000059377 00000 n 0000059531 00000 n 0000059656 00000 n 0000062982 00000 n 0000063136 00000 n 0000063261 00000 n 0000067657 00000 n 0000067811 00000 n 0000067936 00000 n 0000074668 00000 n 0000074770 00000 n 0000074884 00000 n 0000074965 00000 n 0000075082 00000 n 0000000061 00001 f 0000075223 00000 n 0000075296 00000 n 0000075450 00000 n 0000075575 00000 n 0000075671 00000 n 0000075886 00000 n 0000075993 00000 n 0000076098 00000 n 0000081549 00000 n 0000000062 00001 f 0000000000 00001 f 0000081627 00000 n 0000081678 00000 n 0000081832 00000 n 0000085274 00000 n 0000085400 00000 n 0000085477 00000 n 0000085555 00000 n 0000085659 00000 n 0000085766 00000 n trailer<</Size 72/Info 50 0 R /Root 52 0 R /ID[<c01d552bc163bdbe157082b53b51dce8><c01d552bc163bdbe157082b53b51dce8>]>>startxref85876%%EOF